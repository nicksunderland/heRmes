[{"path":"https://nicksunderland.github.io/heRmes/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 heRmes authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"aim","dir":"Articles","previous_headings":"","what":"Aim","title":"HERMES 3.0","text":"perform multi-ancestry sex-stratified genome-wide association study (GWAS) meta-analysis HF, ischaemic HF, non-ischaemic HF, DCM, NICM.","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"download-codes","dir":"Articles","previous_headings":"","what":"Download codes","title":"HERMES 3.0","text":"download codes search strategies clink links: Download hermes_3_codes.tsv Download hermes_3_metadata.tsv","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"rationale","dir":"Articles","previous_headings":"","what":"Rationale","title":"HERMES 3.0","text":"Heart failure (HF) shown substantial sex differences clinical presentations risk profiles, much remains unclear HF women.1–3 Sex-stratified genome-wide association studies (GWAS) provided mechanistic insights diseases known phenotypic sex differences.4,5 project aims identify sex-specific HF risk loci, performing sex-stratified GWAS -cause HF subtypes stratified ischaemic aetiology, including analysis X chromosome (ChrX). research, particularly analysis non-ischaemic HF, envisioned build new knowledge sex-specific genetic basis HF identify non-traditional risk factors. HF amongst individuals congenital heart disease represents distinct entity, largely due structural malformations embryonic cardiogenesis. Whilst cases remain unexplained, genetic association studies highlighted variants important patterning genes potential causal factors.6 study, interested hearts seemingly developed normally go fail. Given often dramatic structural abnormalities seen congenital heart disease likely distinct pathophysiology (embryonic patterning), excluded subgroup HF definition. Chronic respiratory disease, predominantly COPD, common comorbidity amongst patients diagnosed HF.7 Whilst outcomes poorer HF subgroup, standard HF therapeutics offer similar prognostic benefits suggesting shared underlying pathophysiological mechanisms.7 Diagnosis either, , conditions can challenging due overlapping clinical signs symptoms. However, chronic respiratory disease HF share multiple upstream risk factors - smoking obvious - therefore conditioning chronic respiratory disease status potential induce bias data. Therefore, excluded chronic respiratory disease patients HF definition, long also definite, non-ambiguous, HF diagnostic code.","code":""},{"path":[]},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"HERMES 3.0","text":"Subjects: Individuals European, South Asian, East Asian, African, Hispanic, Indigenous American ancestries free congenital heart disease, without prevalent HF. Genotypes: Autosomal ChrX SNPs (preferably imputed HRC, TOPMED, population-specific haplotypes). Phenotypes: Three phenotypes described (minimum 500 cases 500 controls sex ancestry-specific GWAS analysis).","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"return-of-results","dir":"Articles","previous_headings":"","what":"Return of results","title":"HERMES 3.0","text":"Cardiovascular Knowledge Portal team developed private data repository HERMES3 functionality validate file formats run QC cohort-level GWAS summary data. issues data upload Portal, please contact Nick (nicholas.sunderland@bristol.ac.uk) Clara (j.jiang@uq.edu.au) login details assistance.","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"phenotype-definition","dir":"Articles","previous_headings":"","what":"Phenotype definition","title":"HERMES 3.0","text":"define phenotypes study, please follow two-step approach described :","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"step-1","dir":"Articles","previous_headings":"Phenotype definition","what":"Step 1","title":"HERMES 3.0","text":"participant, define status (TRUE / FALSE) following phenotype classifiers: available, manually adjudicated clinical definitions made trained physicians preferred. de novo adjudication using electronic health records, please define classifiers presence least 1 relevant diagnosis/procedure code, can accessed via “heRmes” GitHub: https://nicksunderland.github.io/heRmes/articles/hermes_3.html Please keep record commit ID downloading codes, case code updates. Please note code dictionaries “.” separator within disease codes (e.g. I50.0 versus I500), please adjust accordingly. appropriate, please also include code systems (e.g. READ) mapping recommended codes. Please contact central analyst team cohort-specific adjudication mentioned . Notes definition controls: Please note two different sets super controls used: one phenotype 1-3 (see Table 1 Figure 1), one phenotype 4 – 5 (see Table 2 Figure 2), self-reported data available, individuals self-reported diseases (e.g. HF MI/CABG/PCI/thrombolysis) lack corresponding disease diagnosis/procedure code excluded controls. cohorts, self-reported data readily available. example, UK Biobank, data field contains self-reported diseases. self-reported data complex cohort, please get contact Clara (j.jiang@uq.edu.au) discuss.","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"step-2a-phenotypes-1-3","dir":"Articles","previous_headings":"Phenotype definition","what":"Step 2a (phenotypes 1-3)","title":"HERMES 3.0","text":"participant, classify status (case/control/exclude) target GWAS cases controls combining classifier status Step 1 using logic described Table 1 illustrated Figure 1: Table 1. GWAS Phenotype classifiers -cause HF, ischaemic HF, non-ischaemic HF (phenotypes 1-3) Figure 1. Phenotyping algorithm phenotype 1 - 3","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"step-2b-phenotypes-4-5","dir":"Articles","previous_headings":"Phenotype definition","what":"Step 2b (phenotypes 4-5)","title":"HERMES 3.0","text":"Step 2b (phenotype 4 – 5). participant, classify status (case/control/exclude) target GWAS cases controls combining classifier status Step 1 using logic described Table 2 Figure 2: Table 2. GWAS Phenotype classifiers DCM NICM (phenotypes 4-5) * Myocardial infarction, ICM, revascularisation exclusion made based codes appearing prior DCM / NICM inclusion codes - .e. excluding antecedent ischaemic events allowing ischaemic events happen DCM / NICM diagnosis. Individuals ischaemic events occur absence DCM NICM excluded controls. Figure 2. Phenotyping algorithm phenotype 4 - 5","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"heart-failure","dir":"Articles","previous_headings":"","what":"Heart Failure","title":"HERMES 3.0","text":"Definition: Heart failure single pathological diagnosis, clinical syndrome consisting cardinal symptoms (e.g. breathlessness, ankle . swelling, fatigue) may accompanied signs (e.g. elevated . jugular venous pressure, pulmonary crackles, peripheral oedema). due structural /functional abnormality heart results elevated intracardiac pressures /inadequate cardiac output rest /exercise.. Reference: https://www.escardio.org/Guidelines/Clinical-Practice-Guidelines/Acute--Chronic-Heart-Failure. Terminologies: SNOMED, ICD10, ICD9. Search expressions: (84114007) | ((?)(heart|cardiac|ventricular) failure) | ((?)cardiac insufficiency) | ( HF ).","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"dilated-cardiomyopathy","dir":"Articles","previous_headings":"","what":"Dilated cardiomyopathy","title":"HERMES 3.0","text":"Definition: presence LV dilatation global regional systolic dysfunction unexplained solely abnormal loading conditions (e.g. hypertension, valve disease, congenital heart disease, coronary artery disease. (ESC, 2023). Reference: https://doi.org/10.1093/eurheartj/ehad194. Terminologies: SNOMED, ICD10, ICD9. Search expressions: (399020009) | ((?)cardiomyopath(y|ies)).","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"dilated-cardiomyopathy-associated-with","dir":"Articles","previous_headings":"","what":"Dilated cardiomyopathy (associated with)","title":"HERMES 3.0","text":"Definition: presence LV dilatation global regional systolic dysfunction unexplained solely abnormal loading conditions (e.g. hypertension, valve disease, congenital heart disease, coronary artery disease. (ESC, 2023). Reference: https://doi.org/10.1093/eurheartj/ehad194. Terminologies: SNOMED, ICD10, ICD9. Search expressions: (399020009) | ((?)cardiomyopath(y|ies)).","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"left-ventricular-systolic-dysfunction","dir":"Articles","previous_headings":"","what":"Left ventricular systolic dysfunction","title":"HERMES 3.0","text":"Definition: Left ventricular systolic dysfunction defined code indicating impaired LV ejection fraction, heart failure reduced mid-range ejection fraction. HF reduced ejection fraction defined HF LVEF<40% HF mid-range ejection fraction LVEF 40-49%.. Reference: https://www.escardio.org/Guidelines/Clinical-Practice-Guidelines/Acute--Chronic-Heart-Failure. Terminologies: SNOMED, ICD10, ICD9. Search expressions: (systolic .*(dys-?function|failure|insufficiency)) | (134401001).","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"myocardial-infarction","dir":"Articles","previous_headings":"","what":"Myocardial infarction","title":"HERMES 3.0","text":"Definition: clinical definition myocardial denotes presence acute myocardial injury detected abnormal cardiac biomarkers setting evidence myocardial injury (new ischaemic ECG changes loss viable myocardium imaging, coronary thrombosis angiography aithopsy).. Reference: https://www.ahajournals.org/doi/10.1161/CIR.0000000000000617. Terminologies: SNOMED, ICD10, ICD9. Search expressions: (22298006) | ((?)myocardial infarction) | ((?)acute ischa?emic heart disease) | ((?)acute .*coronary .*(disease|dysfunction)) | ((?)dressler).","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"coronary-artery-bypass-grafting","dir":"Articles","previous_headings":"","what":"Coronary artery bypass grafting","title":"HERMES 3.0","text":"Definition: Coronary artery bypass graft surgery procedure involves sternotomy bypass diseased segment(s) coronary tree using blood vessels derived parts body connected aorta.. Reference: https://www.nhs.uk/conditions/coronary-artery-bypass-graft-cabg/. Terminologies: SNOMED_procedure, OPCS4, CPT4, ICD9_procedure. Search expressions: (K4[0-9][0-9]?) | (K50[0-9]?|K75[0-9]?) | ((?)coronary (artery )?bypass) | ((?)aortocoronary bypass) | (CABG) | ((?)(graft|replacement|connection|anastomosis|implantation|bypass|repair|operations?|open angioplasty) .*coronary arter(y|ies)) | (232717009).","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"percutaneous-coronary-intervention","dir":"Articles","previous_headings":"","what":"Percutaneous coronary intervention","title":"HERMES 3.0","text":"Definition: Percutaneous coronary intervention (PCI) defined placement angioplasty guidewire, balloon, device (e.g. stent, atherectomy, brachytherapy, thrombectomy catheter) native coronary artery graft purpose mechanical coronary revascularisation. assessment coronary lesion severity fluoroscopy, intracoronary imaging (e.g. intravascular ultrasonography) physiology (e.g. fractional flow reserve) considered PCI procedure.. Reference: https://www.nhs.uk/conditions/coronary-angioplasty/. Terminologies: SNOMED_procedure, OPCS4, CPT4, ICD9_procedure. Search expressions: (K49[0-9]+?|K50[0-9]+|K75[0-9]+) | ((?)percutaneous coronary intervention) | ((?)(percutaneous|transluminal) .*(angioplasty|stent|thrombolysis|thrombectomy|therapeutic|atherectomy|operations|lithotripsy).*coronar(y|ies)) | ((?)(percutaneous|transluminal) .*coronar(y|ies) .*(angioplasty|stent|thrombolysis|thrombectomy|therapeutic|atherectomy|operations|lithotripsy)) | (415070008).","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"thrombolysis-coronary","dir":"Articles","previous_headings":"","what":"Thrombolysis (coronary)","title":"HERMES 3.0","text":"Definition: delivery thrombolytic therapy, either intravenously intracoronary, treatment coronary thrombosis.. Reference: https://www.ahajournals.org/doi/full/10.1161/01.CIR.97.16.1632. Terminologies: SNOMED_procedure, OPCS4, CPT4, ICD9_procedure. Search expressions: (K502) | (coronary thrombolysis) | ((?)thrombolytic) | (thrombolysis) | (32912007).","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"ischaemic-cardiomyopathy","dir":"Articles","previous_headings":"","what":"Ischaemic cardiomyopathy","title":"HERMES 3.0","text":"Definition: Ischemic cardiomyopathy defined left ventricular dysfunction caused coronary artery disease (CAD). Specifically, must implication cardiomyopathy LV dysfunction, simply coronary artery disease.. Reference: https://www.ncbi.nlm.nih.gov/books/NBK209964/. Terminologies: SNOMED, ICD10, ICD9. Search expressions: (?)ischa?emic heart disease|(?)ischa?emic cardiomyopath(y|ies)|(?)cardiomyopath(y|ies) ischa?emic.","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"congenital-heart-disease","dir":"Articles","previous_headings":"","what":"Congenital heart disease","title":"HERMES 3.0","text":"Definition: Congenital heart disease encompasses wide range cardiac defects affect normal heart function. fault problems present birth.. Reference: https://www.nhs.uk/conditions/congenital-heart-disease/. Terminologies: ICD9, ICD10, SNOMED. Search expressions: (13213009) | (Q2[0-6][0-9]?) | ((?)(congenital|anomal(ous|ies)|hypoplasia|supernumerary|atresia|aplasia|absen(ce|t)|transposition).*(heart|cardiac|myocard|epicard|pulmon(ic|ary)|tricuspid|mitral|aortic|vena cava|great (arter[y|ies]|veins?|vessels?)|coronary|aorta|atri(|um)|ventric(ular|le))) | ((?)congenital .*(pulmonary|tricuspid|aortic|mitral) .*valves?) | ((?)parachute malformation .*mitral valve) | ((?)subaortic stenosis) | ((?)bicuspid .*aortic) | ((?)fontan|fallot) | ((?)(double (outlet|inlet)|single) .*ventricle) | ((?)abnormal relationship .*(pulmonary|aortic|ventricle) .*(pulmonary|aortic|ventricle)) | ((?)(abnormal|discordant|ambiguous|absent) atrioventricular connection) | ((?)(atrial|ventric[ulare]+|aortopulmonary) sept(um|al) defect) | ((?)cor triatriatum|truncus arteriosus) | ((?)(double|right|left|interrupted) .*aortic arch) | ((?)ebstein|holt[- ]?oram|eisenmenger|lutembacher|prune belly syndrome) | ((?)(dextro|levo|meso|hemi|)(cardia|rotation|transposition)) | ((?)levoatrial cardinal vein) | ((?)juxtaposed atrial appendage) | ((?)coarctation) | ((?)(abdominal|criss[- ]?cross|mirror[- ]?imaged) heart) | ((?)endocardial cushion defect) | ((?)ostium (primum|secundum)|foramen ovale) | ((?)stenosis .*infundibulum) | ((?)infundibul.* stenosis) | ((?)cor triloculare) | ((?)persistent aortic arch convolutions) | ((?)single coronary artery) | ((?)familial mitral valve prolapse).","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"congenital-heart-disease-procedure","dir":"Articles","previous_headings":"","what":"Congenital heart disease procedure","title":"HERMES 3.0","text":"Definition: Congenital heart disease encompasses wide range cardiac defects affect normal heart function. fault problems present birth. concept defines procedures congenital heart disease.. Reference: https://www.nhs.uk/conditions/congenital-heart-disease/. Terminologies: SNOMED_procedure, OPCS4, CPT4, ICD9_procedure. Search expressions: (K[0-3].*) | (K(29[67]|305|336|34[56]|35[467]|36[12]|37[1-6]|38[56]|482|577)) | (K76.*) | (L0.*) | (L1[0-3][0-9]?) | ((?)congenital.*(heart|cardiac)) | ((?)(heart|cardiac).*congenital) | ((?)congenital .*(pulmonary|tricuspid|aortic|mitral) .*valves?) | ((?)(congenital|transposition) .*great (arter[y|ies]|veins?)) | ((?)fontan|norwood|fallot|blalock|mustard|senning|nikaidoh|jatene|rastelli) | ((?)(double outlet|single) .*ventricle) | ((?)(atrial|ventric[ulare]+|aortopulmonary) septal defect) | ((?)cor triatriatum|truncus arteriosus) | (9359[3-7]) | (93594).","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"restrictive-cardiomyopathy","dir":"Articles","previous_headings":"","what":"Restrictive cardiomyopathy","title":"HERMES 3.0","text":"Definition: Restrictive cardiomyopathy (RCM) defined restrictive left /RV pathophysiology presence normal reduced diastolic volumes (one ventricles), normal reduced systolic volumes, normal ventricular wall thickness. (ESC, 2023). Reference: https://doi.org/10.1093/eurheartj/ehad194. Terminologies: SNOMED, ICD10, ICD9. Search expressions: (415295002) | ((?)(restrictive|constrictive) (cardiomyopath.*|heart failure)) | ((?)(cardiomyopath.*|heart failure).*(restrictive|constrictive)).","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_3.html","id":"hypertrophic-cardiomyopathy","dir":"Articles","previous_headings":"","what":"Hypertrophic cardiomyopathy","title":"HERMES 3.0","text":"Definition: Hypertrophic cardiomyopathy (HCM) defined presence increased LV wall thickness (without RV hypertrophy) mass solely explained abnormal loading conditions. (ESC, 2023). Reference: https://doi.org/10.1093/eurheartj/ehad194. Terminologies: SNOMED, ICD10, ICD9. Search expressions: (233873004) | ((?)cardiomyopath(y|ies)).","code":""},{"path":[]},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_qc_script.html","id":"required-r-libraries","dir":"Articles","previous_headings":"","what":"Required R libraries","title":"HERMES QUALITY CONTROL","text":"","code":"library(argparse) library(cli) library(data.table) library(ggplot2) library(viridis) #> Loading required package: viridisLite"},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_qc_script.html","id":"script-location","dir":"Articles","previous_headings":"","what":"Script location","title":"HERMES QUALITY CONTROL","text":"https://github.com/nicksunderland/heRmes/blob/main/scripts/gwas_qc.R","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_qc_script.html","id":"qc-script-inputs","dir":"Articles","previous_headings":"","what":"QC script inputs","title":"HERMES QUALITY CONTROL","text":"QC script input parameters can seen calling script --help flag.","code":"Rscript $QC_SCRIPT --help #>  #>  [36m── [39m  [1mQC script - active arguments [22m  [36m──────────────────────────────────────────────── [39m #> usage: /home/runner/work/heRmes/heRmes/scripts/gwas_qc.R [-h] [-v] [-q] #>                                                          [-g GWAS] [-r REF] #>                                                          [-o OUTPUT] #>                                                          [-chr GWAS_CHR] #>                                                          [-bp GWAS_BP] #>                                                          [-ea GWAS_EA] #>                                                          [-oa GWAS_OA] #>                                                          [-eaf GWAS_EAF] #>                                                          [-beta GWAS_BETA] #>                                                          [-se GWAS_SE] #>                                                          [-p GWAS_P] #>                                                          [-n GWAS_N] #>                                                          [-info GWAS_INFO] #>                                                          [-r_id REF_ID] #>                                                          [-r_chr REF_CHR] #>                                                          [-r_bp REF_BP] #>                                                          [-r_ea REF_EA] #>                                                          [-r_oa REF_OA] #>                                                          [-r_eaf REF_EAF] #>                                                          [-adj {lambda,ldsc}] #>                                                          [-noind] #>                                                          [-fd FREQ_DIFF] #>                                                          [-it INFO_THRESH] #>                                                          [-an {AFR,AMR,CSA,EAS,EUR,MID}] #>  #> options: #>   -h, --help            show this help message and exit #>   -v, --verbose         Print extra output [default] #>   -q, --quietly         Print little output #>   -g GWAS, --gwas GWAS  GWAS file path #>   -r REF, --ref REF     Reference file path #>   -o OUTPUT, --output OUTPUT #>                         Output directory path #>   -chr GWAS_CHR, --gwas_chr GWAS_CHR #>                         Chromosome column name in the GWAS file #>   -bp GWAS_BP, --gwas_bp GWAS_BP #>                         Base position column name in the GWAS file #>   -ea GWAS_EA, --gwas_ea GWAS_EA #>                         Effect allele column name in the GWAS file #>   -oa GWAS_OA, --gwas_oa GWAS_OA #>                         Other allele column name in the GWAS file #>   -eaf GWAS_EAF, --gwas_eaf GWAS_EAF #>                         Effect allele frequency column name in the GWAS file #>   -beta GWAS_BETA, --gwas_beta GWAS_BETA #>                         Beta column name in the GWAS file #>   -se GWAS_SE, --gwas_se GWAS_SE #>                         Standard error column name in the GWAS file #>   -p GWAS_P, --gwas_p GWAS_P #>                         P-value column name in the GWAS file #>   -n GWAS_N, --gwas_n GWAS_N #>                         Sample size column name in the GWAS file #>   -info GWAS_INFO, --gwas_info GWAS_INFO #>                         Imputation information score column name in the GWAS #>                         file #>   -r_id REF_ID, --ref_id REF_ID #>                         Reference rsid column name in the REF file #>   -r_chr REF_CHR, --ref_chr REF_CHR #>                         Reference chromosome column name in the REF file #>   -r_bp REF_BP, --ref_bp REF_BP #>                         Reference base position column name in the REF file #>   -r_ea REF_EA, --ref_ea REF_EA #>                         Reference effect allele column name in the REF file #>   -r_oa REF_OA, --ref_oa REF_OA #>                         Reference other allele column name in the REF file #>   -r_eaf REF_EAF, --ref_eaf REF_EAF #>                         Reference effect allele frequency column name in the #>                         REF file #>   -adj {lambda,ldsc}, --adjustment {lambda,ldsc} #>                         Apply genomic control p-value & standard error #>                         adjustment using either the GC lambda ('lambda') or #>                         the LD score regression intercept ('ldsc') #>                         [default=OFF] #>   -noind, --no_indel_alleles #>                         Remove indel alleles [default=FALSE] #>   -fd FREQ_DIFF, --freq_diff FREQ_DIFF #>                         Retain variants with GWAS:REF allele frequency #>                         different less than ... [default=0.2] #>   -it INFO_THRESH, --info_thresh INFO_THRESH #>                         Retain variants with info score greater than ... #>                         [default=NULL (off)] #>   -an {AFR,AMR,CSA,EAS,EUR,MID}, --ancestry {AFR,AMR,CSA,EAS,EUR,MID} #>                         Ancestry code [default=EUR]"},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_qc_script.html","id":"reviewer-qc-input-controls","dir":"Articles","previous_headings":"","what":"Reviewer QC input controls","title":"HERMES QUALITY CONTROL","text":"main required inputs required table , likely need add .","code":""},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_qc_script.html","id":"example-qc-script-call","dir":"Articles","previous_headings":"","what":"Example QC script call","title":"HERMES QUALITY CONTROL","text":"","code":"# Rscript /Users/xx20081/git/heRmes/scripts/gwas_qc.R -h  Rscript /Users/xx20081/git/heRmes/scripts/gwas_qc.R \\   --gwas '/Users/xx20081/Desktop/hermes_cohorts/discovehr_omni/discovehromni_pheno5_hrc_eur_mixed.tsv.gz' \\   --gwas_chr 'chr' \\   --gwas_bp 'pos_b37' \\   --gwas_ea 'A_coded' \\   --gwas_oa 'A_noncoded' \\   --gwas_eaf 'AFreq_coded' \\   --gwas_beta 'beta' \\   --gwas_se 'SE' \\   --gwas_p 'pval' \\   --gwas_n 'n_total' \\   --ref '/Users/xx20081/Documents/local_data/genome_reference/hrc_37/HRC.r1-1.GRCh37.wgs.mac5.sites.tab.gz' \\   --ref_id 'ID' \\   --ref_chr '#CHROM' \\   --ref_bp 'POS' \\   --ref_ea 'ALT' \\   --ref_oa 'REF' \\   --ref_eaf 'AF' \\   --freq_diff 0.2 \\   --out '/Users/xx20081/Desktop/qc_tests' \\   --freq_diff 0.2 #\\   #--adjustment 'ldsc'   Rscript /Users/xx20081/git/heRmes/scripts/gwas_qc.R \\   --gwas '/Users/xx20081/Downloads/sample-gwas-expanded.csv' \\   --gwas_chr 'CHR' \\   --gwas_bp 'BP' \\   --gwas_ea 'EA' \\   --gwas_oa 'OA' \\   --gwas_eaf 'EUR_EAF' \\   --gwas_beta 'BETA' \\   --gwas_se 'SE' \\   --gwas_p 'P' \\   --gwas_n 'N' \\   --ref '/Users/xx20081/Documents/local_data/genome_reference/hrc_37/HRC.r1-1.GRCh37.wgs.mac5.sites.tab.gz' \\   --ref_id 'ID' \\   --ref_chr '#CHROM' \\   --ref_bp 'POS' \\   --ref_ea 'ALT' \\   --ref_oa 'REF' \\   --ref_eaf 'AF' \\   --freq_diff 0.2 \\   --out '/Users/xx20081/Desktop/qc_tests' \\   --no_indel_alleles"},{"path":"https://nicksunderland.github.io/heRmes/articles/hermes_qc_script.html","id":"qc-script","dir":"Articles","previous_headings":"","what":"QC script","title":"HERMES QUALITY CONTROL","text":"quality control procedure code presented .","code":"#!/usr/bin/env Rscript # #  Nick Sunderland <nicholas.sunderland@bristol.ac.uk> # #  GWAS QC script # #  Command line options= run this script with the -h/--help flag to see options #  Some good resources here: https://github.com/swvanderlaan/MetaGWASToolKit/tree/master/SCRIPTS #   #============================================================================= # required packages #============================================================================= suppressPackageStartupMessages(library(argparse)) suppressPackageStartupMessages(library(cli)) suppressPackageStartupMessages(library(data.table)) suppressPackageStartupMessages(library(ggplot2)) suppressPackageStartupMessages(library(viridis)) suppressPackageStartupMessages(library(stats)) #   devtools::install_github(\"mglev1n/ldscr\") suppressPackageStartupMessages(library(ldscr))   #============================================================================= # parse cli arguments #============================================================================= cli_h1(\"QC script - active arguments\")  parser <- ArgumentParser() # basic controls parser$add_argument(\"-v\", \"--verbose\",    action=\"store_true\",  default=TRUE,     help=\"Print extra output [default]\") parser$add_argument(\"-q\", \"--quietly\",    action=\"store_false\", dest=\"verbose\",   help=\"Print little output\") # file paths and file handling parser$add_argument(\"-g\", \"--gwas\",       action=\"store\",       type=\"character\", help=\"GWAS file path\") parser$add_argument(\"-r\", \"--ref\",        action=\"store\",       type=\"character\", help=\"Reference file path\") parser$add_argument(\"-o\", \"--output\",     action=\"store\",       type=\"character\", help=\"Output directory path\") # GWAS file columns parser$add_argument(\"-chr\", \"--gwas_chr\",  action=\"store\", type=\"character\", help=\"Chromosome column name in the GWAS file\", default = \"chr\") parser$add_argument(\"-bp\",  \"--gwas_bp\",   action=\"store\", type=\"character\", help=\"Base position column name in the GWAS file\", default = \"bp\") parser$add_argument(\"-ea\",  \"--gwas_ea\",   action=\"store\", type=\"character\", help=\"Effect allele column name in the GWAS file\", default = \"ea\") parser$add_argument(\"-oa\",  \"--gwas_oa\",   action=\"store\", type=\"character\", help=\"Other allele column name in the GWAS file\", default = \"oa\") parser$add_argument(\"-eaf\", \"--gwas_eaf\",  action=\"store\", type=\"character\", help=\"Effect allele frequency column name in the GWAS file\", default = \"eaf\") parser$add_argument(\"-beta\",\"--gwas_beta\", action=\"store\", type=\"character\", help=\"Beta column name in the GWAS file\", default = \"beta\") parser$add_argument(\"-se\",  \"--gwas_se\",   action=\"store\", type=\"character\", help=\"Standard error column name in the GWAS file\", default = \"se\") parser$add_argument(\"-p\",   \"--gwas_p\",    action=\"store\", type=\"character\", help=\"P-value column name in the GWAS file\", default = \"p\") parser$add_argument(\"-n\",   \"--gwas_n\",    action=\"store\", type=\"character\", help=\"Sample size column name in the GWAS file\", default = \"n\") parser$add_argument(\"-info\",\"--gwas_info\", action=\"store\", type=\"character\", help=\"Imputation information score column name in the GWAS file\", default = NULL) # Reference file columns parser$add_argument(\"-r_id\",  \"--ref_id\",  action=\"store\", type=\"character\", help=\"Reference rsid column name in the REF file\", default = \"chr\") parser$add_argument(\"-r_chr\", \"--ref_chr\", action=\"store\", type=\"character\", help=\"Reference chromosome column name in the REF file\", default = \"chr\") parser$add_argument(\"-r_bp\",  \"--ref_bp\",  action=\"store\", type=\"character\", help=\"Reference base position column name in the REF file\", default = \"bp\") parser$add_argument(\"-r_ea\",  \"--ref_ea\",  action=\"store\", type=\"character\", help=\"Reference effect allele column name in the REF file\", default = \"ea\") parser$add_argument(\"-r_oa\",  \"--ref_oa\",  action=\"store\", type=\"character\", help=\"Reference other allele column name in the REF file\", default = \"oa\") parser$add_argument(\"-r_eaf\", \"--ref_eaf\", action=\"store\", type=\"character\", help=\"Reference effect allele frequency column name in the REF file\", default = \"eaf\") # QC parameters parser$add_argument(\"-adj\",   \"--adjustment\", action=\"store\", type=\"character\", default=NULL, choices = c(\"lambda\", \"ldsc\"), help=\"Apply genomic control p-value & standard error adjustment using either the GC lambda ('lambda') or the LD score regression intercept ('ldsc') [default=OFF]\") parser$add_argument(\"-noind\", \"--no_indel_alleles\", action=\"store_true\", default=FALSE, help=\"Remove indel alleles [default=FALSE]\") parser$add_argument(\"-fd\",    \"--freq_diff\", action=\"store\", type=\"numeric\", default=0.2, help=\"Retain variants with GWAS:REF allele frequency different less than ... [default=0.2]\") parser$add_argument(\"-it\",    \"--info_thresh\", action=\"store\", type=\"numeric\", default=NULL, help=\"Retain variants with info score greater than ... [default=NULL (off)]\") parser$add_argument(\"-an\",    \"--ancestry\", action=\"store\", type=\"character\", default=\"EUR\", choices = c(\"AFR\", \"AMR\", \"CSA\", \"EAS\", \"EUR\", \"MID\"), help=\"Ancestry code [default=EUR]\")  # parse CLI arguments args <- parser$parse_args()  # print out the arguments used to the console for (i in seq_along(args)) {   cli_text(\"{.strong {names(args)[i]}} = {.val {args[[i]]}}\") }   #============================================================================= # start QC run #============================================================================= cli_h1(\"Running GWAS quality control\")  # summary table to be iteratively filled summary <- data.table()  #============================================================================= # basic check files #============================================================================= cli_progress_step(\"checking file paths and columns names\")  # Check GWAS file path provided and that we can read from it if (is.null(args$gwas) || !file.exists(args$gwas) || file.access(args$gwas, 4) != 0) {   cli_abort(\"GWAS file path `{.file {args$gwas}}` does not exist or is not readable\") }  # Check GWAS file column names all present gwas_header <- fread(args$gwas, nrows = 0) gwas_cols <- sapply(args[c(\"gwas_chr\",\"gwas_bp\",\"gwas_ea\",\"gwas_oa\",\"gwas_eaf\",\"gwas_beta\",\"gwas_se\",\"gwas_p\",\"gwas_n\")], function(x) x %in% names(gwas_header)) if (!all(gwas_cols)) {   for (i in seq_along(gwas_cols)) {     if (gwas_cols[[i]]) {       cli_alert_success(\"{names(gwas_cols)[i]} = {args[names(gwas_cols)[i]]}\")     } else {       cli_alert_danger(\"{names(gwas_cols)[i]} = {args[names(gwas_cols)[i]]}\")     }   }   cli_abort(\"Columns not all found in GWAS file columns [{names(gwas_header)}]\") }  # Check reference file path provided and that we can read from in if (is.null(args$ref) || !file.exists(args$ref) || file.access(args$ref, 4) != 0) {   cli_abort(\"Reference file path `{.file {args$reference}}` does not exist or is not readable\") }  # Check GWAS file column names all present ref_header <- fread(args$ref, nrows = 0) ref_cols <- sapply(args[c(\"ref_id\", \"ref_chr\",\"ref_bp\",\"ref_ea\",\"ref_oa\",\"ref_eaf\")], function(x) x %in% names(ref_header)) if (!all(ref_cols)) {   for (i in seq_along(ref_cols)) {     if (ref_cols[[i]]) {       cli_alert_success(\"{names(ref_cols)[i]} = {args[names(ref_cols)[i]]}\")     } else {       cli_alert_danger(\"{names(ref_cols)[i]} = {args[names(ref_cols)[i]]}\")     }   }   cli_abort(\"Columns not all found in reference file columns [{names(ref_header)}]\") }  # Check output directory exists if (is.null(args$output) || !dir.exists(args$output)) {   cli_abort(\"Output directory path `{.file {args$output}}` not provided or does not exist\") }   #============================================================================= # read GWAS and reference data #============================================================================= cli_progress_step(\"reading GWAS\") gwas <- fread(args$gwas) cli_progress_step(\"reading reference\") ref <- fread(args$ref) cli_process_done()  #============================================================================= # check column data missingness #============================================================================= cli_h1(\"Checking column data\") cli_progress_step(\"checking column data\") gwas_cols <- unlist(args[ names(args)[grepl(\"^gwas_\", names(args))] ]) ref_cols  <- unlist(args[ names(args)[grepl(\"^ref_\", names(args))] ])  # total and NA counts num_na_summary <- gwas[, lapply(.SD, function(col) c(num = .N, num_na = sum(is.na(col)), pct_na = sprintf(\"%.1f%%\", 100 * (sum(is.na(col)) / .N)))), .SDcols = gwas_cols]  # add to summary table summary <- rbind(summary,                  data.table(column   = gwas_cols,                             std_name = names(gwas_cols),                             type     = sapply(gwas[, mget(gwas_cols)], typeof),                             num      = as.integer(sapply(num_na_summary, `[[`, 1)),                             num_na   = as.integer(sapply(num_na_summary, `[[`, 2)),                             pct_na   = sapply(num_na_summary, `[[`, 3)))  # report to console cli_process_done() print(summary)   #============================================================================= # check input data validity #============================================================================= cli_h1(\"Checking data validity\") cli_progress_step(\"checking data validity\")  # per column functions that return true if that row is valid col_fn_list <- list(   gwas_chr  = function(x) x %in% 1:26,   gwas_bp   = function(x) is.integer(x) & x > 0,   gwas_ea   = function(x) grepl(\"^[ACTG]+$|^[DI]$\", x),   gwas_oa   = function(x) grepl(\"^[ACTG]+$|^[DI]$\", x),   gwas_eaf  = function(x) is.numeric(x) & x >= 0 & x <= 1,   gwas_beta = function(x) is.numeric(x) & is.finite(x),   gwas_se   = function(x) is.numeric(x) & x > 0 & is.finite(x),   gwas_p    = function(x) is.numeric(x) & x >= 0 & x <=1,   gwas_n    = function(x) is.integer(x) & x > 0,   gwas_info = function(x) is.numeric(x) & x >= 0 & x <=1,   ref_chr   = function(x) x %in% 1:26,   ref_bp    = function(x) is.integer(x) & x > 0,   ref_ea    = function(x) grepl(\"^[ACTG]+$|^[DI]$\", x),   ref_oa    = function(x) grepl(\"^[ACTG]+$|^[DI]$\", x),   ref_eaf   = function(x) is.numeric(x) & x >= 0 & x <= 1 )  # apply the functions to the corresponding columns and create summary table valid_summary <- gwas[, Map(function(fn, col) {   valid <- sum(fn(col), na.rm = TRUE)   valid_pct <- sprintf(\"%.1f%%\", 100 * (valid / .N))   c(valid = valid, valid_pct = valid_pct) }, col_fn_list[names(gwas_cols)], .SD), .SDcols = gwas_cols]  # add to main summary table summary <- cbind(summary,                  data.table(valid     = as.integer(sapply(valid_summary, `[[`, 1)),                             valid_pct = sapply(valid_summary, `[[`, 2)))  # print summary to console as well as the validity functions used cli_process_done() print(summary) cli_div(theme = list(span.var = list(color = \"gray\"), span.code = list(color = \"gray\"))) cli_h2(\"Column validation functions:\") for (i in seq_along(gwas_cols)) {   cli_text(\"{.field {gwas_cols[i]}:} {.code {deparse(col_fn_list[[names(gwas_cols)[i]]])[2]}}\") }   #============================================================================= # attempt recoding / data fixes #============================================================================= cli_h1(\"Formatting data\") cli_progress_step(\"formatting data\")  # (re)code chromosome column as integer gwas[, (args$gwas_chr) := fcase(as.integer(get(args$gwas_chr)) %in% 1:26, as.integer(get(args$gwas_chr)),                                 grepl(\"(?i)^X$\",   get(args$gwas_chr)),         23L,                                 grepl(\"(?i)^Y$\",   get(args$gwas_chr)),         24L,                                 grepl(\"(?i)^(PAR|XY|YX)$\", get(args$gwas_chr)), 25L,                                 grepl(\"(?i)^MT$\",  get(args$gwas_chr)),         26L,                                 default = NA_integer_)]  # parse base position and n-sample columns to integer integer_cols <- c(args$gwas_bp, args$gwas_n) gwas[, (integer_cols) := lapply(.SD, as.integer), .SDcols = integer_cols]  # parse frequency, beta, se, p, info columns to numeric numeric_cols <- c(args$gwas_eaf, args$gwas_beta, args$gwas_se, args$gwas_p, args$gwas_info) gwas[, (numeric_cols) := lapply(.SD, as.numeric), .SDcols = numeric_cols]  # remove allele frequencies <0 or >1 gwas[get(args$gwas_eaf) < 0 | get(args$gwas_eaf) > 1, (args$gwas_eaf) := NA_real_]  # remove infinite betas gwas[is.infinite(get(args$gwas_beta)), (args$gwas_beta) := NA_real_]  # remove infinite, zero, or negative standard errors gwas[is.infinite(get(args$gwas_se)) | get(args$gwas_se) <= 0, (args$gwas_se) := NA_real_]  # recode pvalue=0 to minimum machine precision and remove p>1 or p<0 gwas[, (args$gwas_p) := fcase(get(args$gwas_p) == 0, .Machine$double.xmin,                               get(args$gwas_p) > 0 & get(args$gwas_p) <= 1, get(args$gwas_p),                               default = NA_real_)]  # remove info scores >1 or <0 if (!is.null(args$info_thresh) & !is.null(args$gwas_info)) {   gwas[get(args$gwas_info) < 0 | get(args$gwas_info) > 1 | get(args$gwas_info) < args$info_thresh, (args$gwas_info) := NA_real_] } else if (is.null(args$info_thresh) & !is.null(args$gwas_info)) {   cli_alert_info(\"info_thresh not provided, skipping info score filtering and setting info score to 1 for all variants\")   gwas[, (args$gwas_info) := 1] }  # alleles must be characters gwas[, c(args$gwas_ea, args$gwas_oa) := lapply(.SD, as.character), .SDcols = c(args$gwas_ea, args$gwas_oa)]  # find indels and and number to summary, remove indels if flag specified indel_idx <- which(gwas[, .(nchar(get(args$gwas_ea)) > 1 | nchar(get(args$gwas_oa)) > 1 | grepl(\"(?i)^[DI]$\", get(args$gwas_ea)) | grepl(\"(?i)^[DI]$\", get(args$gwas_oa)))]$V1) if (args$no_indel_alleles) {   gwas[indel_idx, c(args$gwas_ea, args$gwas_oa) := NA_character_]   cli_alert_warning(\"removing {length(indel_idx)} indel alleles\") } summary[grep(\"^gwas_(ea|oa)$\", std_name), indels := length(indel_idx)]  # ensure alleles are upper case ACTG or D/I gwas[, c(args$gwas_ea, args$gwas_oa) := lapply(.SD, function(x) ifelse(grepl(\"(?i)^[ACTG]+$|^[DI]$\", x), toupper(x), NA_character_)), .SDcols = c(args$gwas_ea, args$gwas_oa)]  # summarise the counts during this recoding process postfix_na_summary <- gwas[, lapply(.SD, function(col) c(postfix_valid = sum(!is.na(col)), pct_na = sprintf(\"%.1f%%\", 100 * (sum(!is.na(col)) / .N)))), .SDcols = gwas_cols]  # add to overall summary table summary <- cbind(summary,                  data.table(postfix_valid     = as.integer(sapply(postfix_na_summary, `[[`, 1)),                             postfix_valid_pct = sapply(postfix_na_summary, `[[`, 2)))  # remove invalid rows (those containing NAs) gwas <- gwas[ stats::complete.cases(gwas[, mget(gwas_cols)]) ]  # print updated summary to console print(summary)  # exit if no variants remain if (nrow(gwas) == 0) {   cli_abort(\"no variants remain after data validation filters - check data and summary above\") } else {   cli_process_done() }  #============================================================================= # formatting reference #============================================================================= col_fn_list <- list(   ref_id    = as.character,   ref_chr   = as.character,   ref_bp    = as.integer,   ref_ea    = as.character,   ref_oa    = as.character,   ref_eaf   = as.numeric ) ref[ , (ref_cols)  := Map(function(fn, col) fn(col), col_fn_list[names(ref_cols) ], .SD), .SDcols = ref_cols ]   #============================================================================= # harmonise alleles #============================================================================= cli_h1(\"Harmonising to reference\") cli_progress_step(\"harmonising data\")  # currently the harmonising function is in my package, but probably best to supply as a stand alone script h <- genepi.utils::harmonise_gwas(gwas, ref, join = \"chr:bp\", action = 2,                                   gmap = c(chr = args$gwas_chr, bp = args$gwas_bp, ea = args$gwas_ea, oa = args$gwas_oa, eaf = args$gwas_eaf, beta = args$gwas_beta),                                   rmap = c(chr = args$ref_chr, bp = args$ref_bp, ea = args$ref_ea, oa = args$ref_oa, eaf = args$ref_eaf))  # harmonisation summary, add to main summary summary[, `:=`(harmonised = nrow(h), harmonised_pct = sprintf(\"%.1f%%\", 100*(nrow(h)/num[1])))]  # print updated summary to console print(summary)  # exit if no variants remain if (nrow(h) == 0) {   cli_warn(\"no variants remain after harmonisation - check data and summary above\") } cli_process_done()   #============================================================================= # allele frequency analysis #============================================================================= cli_h1(\"Anaylsing GWAS:REF allele frequency\") cli_progress_step(\"analysing allele frequency difference\")  # absolute frequency difference cohort vs reference h[, freq_diff := abs(eaf - eaf_ref)]  # add frequency difference counts to summary table diff_col <- paste0(\"freq_diff_lt\", args$freq_diff) summary[, c(diff_col, paste0(diff_col, \"_pct\")) := .(sum(h$freq_diff < args$freq_diff), sprintf(\"%.1f%%\", 100*(sum(h$freq_diff < args$freq_diff)/num[1])))]  # print summary to console cli_process_done() print(summary)  # plot the frequency differences eaf_plot <- ggplot(h[freq_diff > args$freq_diff], aes(x = eaf_ref, y = eaf, color = freq_diff)) +   geom_point(size = 3) +   geom_point(data = h[freq_diff > args$freq_diff & strand_flip == TRUE], shape = 17, color = \"red\", size = 3) +   geom_abline(slope = 1, intercept =  args$freq_diff, linetype = \"dashed\", color = \"red\") +   geom_abline(slope = 1, intercept = -1 * args$freq_diff, linetype = \"dashed\", color = \"red\") +   viridis::scale_colour_viridis(option = \"mako\") +   labs(x = \"Reference allele frequency\", y = \"Cohort allele frequency\",        caption = \"*red triangles strand flip\") +   lims(x = c(0,1), y = c(0,1)) +   theme_minimal(base_size = 18) +   theme(legend.position = \"none\")  # save plot cli_progress_step(\"plotting allele frequency difference\") grDevices::png(file.path(args$output, \"eaf_plot.png\"), width = 600, height = 600) print(eaf_plot) invisible(dev.off()) cli_process_done()  # filter out the frequency differences over the provided threshold h <- h[freq_diff < args$freq_diff]  # extract the data from the harmonisation table (don't need the reference columns now, except for the rsid) setnames(h,          old = c(paste0(ref_cols[[\"ref_id\"]], \"_ref\"), \"chr\",\"bp\",\"ea\",\"oa\",\"eaf\",\"beta\", gwas_cols[[\"gwas_se\"]], gwas_cols[[\"gwas_p\"]], gwas_cols[[\"gwas_n\"]]),          new = c(ref_cols[[\"ref_id\"]],                  gwas_cols[[\"gwas_chr\"]],                  gwas_cols[[\"gwas_bp\"]],                  gwas_cols[[\"gwas_ea\"]],                  gwas_cols[[\"gwas_oa\"]],                  gwas_cols[[\"gwas_eaf\"]],                  gwas_cols[[\"gwas_beta\"]],                  gwas_cols[[\"gwas_se\"]],                  gwas_cols[[\"gwas_p\"]],                  gwas_cols[[\"gwas_n\"]]))   #============================================================================= # PZ plot #============================================================================= cli_h1(\"Assessing for analytical issues\")  # generate PZ plot pz_plot <- h[, `:=`(observed = -log10(get(gwas_cols[[\"gwas_p\"]])),                     expected = -log10(2*pnorm(abs(get(gwas_cols[[\"gwas_beta\"]]) / get(gwas_cols[[\"gwas_se\"]])), lower.tail=FALSE)))] |>   ggplot(aes(x = expected, y = observed)) +   geom_point(size = 0.5, color=\"darkblue\") +   geom_abline(slope=1, intercept=0, color=\"darkred\", linetype = \"dotted\") +   labs(x     = \"P.ztest (-log10)\",        y     = \"P (-log10)\",        color = NULL) +   theme_minimal(base_size = 18) +   theme(aspect.ratio = 1)  # save plot cli_progress_step(\"plotting PZ plot\") grDevices::png(file.path(args$output, \"pz_plot.png\"), width = 600, height = 600) print(pz_plot) invisible(dev.off()) cli_process_done()   #============================================================================= # population stratification analysis 1 #============================================================================= cli_h1(\"Assessing for population stratification issues\") cli_progress_step(\"running LDSC\")  # get Z score and run LDSC h[, z := get(gwas_cols[[\"gwas_beta\"]]) / get(gwas_cols[[\"gwas_se\"]])]  # try to run LDSC tryCatch({   ldsc_res <- ldsc_h2(munged_sumstats = h[, list(SNP = get(ref_cols[[\"ref_id\"]]), A1=get(gwas_cols[[\"gwas_ea\"]]), A2=get(gwas_cols[[\"gwas_oa\"]]), Z=z, N=get(gwas_cols[[\"gwas_n\"]]))],                       ancestry        = args$ancestry) }, error = function(e) {   cli_warn(paste0(\"LDSC failed: \\n\", e))   ldsc_res <<- list(intercept = NA_real_) })   #============================================================================= # population stratification analysis 2 #============================================================================= cli_progress_step(\"calculating lambda-GC\")  # data for the QQ plot h[, `:=`(chisq          = qchisq(log(get(gwas_cols[[\"gwas_p\"]])), df = 1, lower.tail = FALSE, log.p = TRUE))] # https://stackoverflow.com/questions/40144267/calculating-miniscule-numbers-for-chi-squared-distribution-numerical-precisio h[, `:=`(lambda         = median(chisq) / qchisq(0.5, 1))] h[, `:=`(adj_chisq_gc   = chisq/lambda)] h[, `:=`(adj_p_gc       = pchisq(adj_chisq_gc, 1, lower.tail=FALSE))] h[, `:=`(adj_se_gc      = get(gwas_cols[[\"gwas_se\"]]) * sqrt(lambda[1]))] h[, `:=`(adj_chisq_ldsc = chisq/ldsc_res$intercept)] h[, `:=`(adj_p_ldsc     = pchisq(adj_chisq_ldsc, 1, lower.tail=FALSE))] h[, `:=`(adj_se_ldsc    = get(gwas_cols[[\"gwas_se\"]]) * sqrt(ldsc_res$intercept))]  qq_data <- rbind(   # unadjusted   h[, .(stat     = \"Unadjusted\",         value    = NA_real_,         observed = -log10(sort(get(gwas_cols[[\"gwas_p\"]]), decreasing=FALSE, na.last=TRUE)),         expected = -log10(ppoints(.N)),         clower   = -log10(qbeta(p = (1 - 0.95) / 2, shape1 = 1:.N, shape2 = .N:1)),         cupper   = -log10(qbeta(p = (1 + 0.95) / 2, shape1 = 1:.N, shape2 = .N:1)))],   # GC lambda adjusted   h[, .(stat     = \"GC lambda\",         value    = lambda[1],         observed = -log10(sort(adj_p_gc, decreasing=FALSE, na.last=TRUE)),         expected = -log10(ppoints(.N)),         clower   = NA_real_,         cupper   = NA_real_)],   # LDSC intercept adjusted   h[, .(stat     = \"LDSC intercept\",         value    = ldsc_res$intercept,         observed = -log10(sort(adj_p_ldsc, decreasing=FALSE, na.last=TRUE)),         expected = -log10(ppoints(.N)),         clower   = NA_real_,         cupper   = NA_real_)] ) setorder(qq_data, expected)  # generate QQ-plot # axis labels log10Pe <- expression(paste(\"Expected -log\"[10], plain(P))) log10Po <- expression(paste(\"Observed -log\"[10], plain(P)))  # lambda labels labels <- qq_data[stat != \"Unadjusted\",                   list(value    = value[1],                        expected = 2.0,                        observed = .GRP-1 + 0.25), by = \"stat\"] labels[, label := sprintf(\"%s = %.3f\", stat, value)]  # plot # colors point_colors <- if (is.null(args$adjustment)) {                   c(Unadjusted = \"blue\", `GC lambda` = \"lightgray\", `LDSC intercept` = \"darkgray\")                 } else if (args$adjustment==\"lambda\") {                   c(Unadjusted = \"lightgray\", `GC lambda` = \"blue\", `LDSC intercept` = \"darkgray\")                 } else if (args$adjustment==\"ldsc\") {                   c(Unadjusted = \"lightgray\", `GC lambda` = \"darkgray\", `LDSC intercept` = \"blue\")                 }  qq_plot <- qq_data |>   ggplot(aes(x = expected, y = observed, color = stat)) +   geom_point(size = 0.5) +   geom_ribbon(aes(x = expected, ymin = clower, ymax = cupper), alpha = 0.1, color=\"transparent\") +   geom_abline(slope=1, intercept=0, color=\"darkred\", linetype = \"dotted\") +   geom_text(data = labels, aes(x=expected, y=observed, label=label), hjust = 0, color=\"black\", show.legend = FALSE) +   scale_color_manual(values = point_colors) +   labs(x = log10Pe,        y = log10Po,        color = \"Adjustment\") +   theme_minimal() +   theme(aspect.ratio    = 1,         legend.position = \"top\")  # save plot cli_progress_step(\"plotting QQ plot\") grDevices::png(file.path(args$output, \"qq_plot.png\"), width = 600, height = 600) print(qq_plot) invisible(dev.off()) cli_process_done()   #============================================================================= # extract then save the clean GWAS and summary table #=============================================================================  # if using adjustment with lambda GC or LDSC intercept, switch the P and SE columns if (!is.null(args$adjustment)) {   if (args$adjustment==\"lambda\") {     h[, c(gwas_cols[[\"gwas_se\"]], gwas_cols[[\"gwas_p\"]]) := .(adj_se_gc, adj_p_gc)]   } else if (args$adjustment==\"ldsc\") {     h[, c(gwas_cols[[\"gwas_se\"]], gwas_cols[[\"gwas_p\"]]) := .(adj_se_ldsc, adj_p_ldsc)]   } }  # extract wanted columns gwas <- h[, .SD, .SDcols = c(ref_cols[[\"ref_id\"]], gwas_cols)]  # save gwas sans_ext <- sub(\"([^.]+)\\\\.[[:alnum:]]+$\", \"\\\\1\", sub(\"[.](gz|bz2|xz)$\", \"\", basename(args$gwas))) out_path <- file.path(args$output, paste0(sans_ext, '_clean.tsv.gz')) cli_progress_step(\"saving clean GWAS file to {.file {out_path}}\") fwrite(gwas, out_path, sep = \"\\t\")  # save summary log_path <- file.path(args$output, paste0(sans_ext, '_log.tsv')) cli_progress_step(\"saving log file to {.file {log_path}}\") fwrite(summary, log_path, sep = \"\\t\")   #============================================================================= # finished #============================================================================= cli_process_done()        #============================================================================= # testing #============================================================================= if (FALSE) {   args = list()   args$gwas = '/Users/xx20081/Documents/local_data/hermes_incidence/raw/Pheno5-DCM_EUR/FORMAT-METAL_Pheno5-DCM_EUR.tsv.gz'   args$ref ='/Users/xx20081/Documents/local_data/genome_reference/hrc_37/HRC.r1-1.GRCh37.wgs.mac5.sites.tab.gz'   args$gwas_beta= \"A1_beta\"   args$gwas_bp= \"pos_b37\"   args$gwas_chr= \"chr\"   args$gwas_ea= \"A1\"   args$gwas_eaf= \"A1_freq\"   args$gwas_info= NULL   args$gwas_n= \"N_total\"   args$gwas_oa= \"A2\"   args$gwas_p= \"pval\"   args$gwas_se= \"se\"   args$output= \"/Users/xx20081/Desktop/qc_tests\"   args$overwrite= TRUE   args$ref_id= \"ID\"   args$ref_bp= \"POS\"   args$ref_chr= \"#CHROM\"   args$ref_ea= \"ALT\"   args$ref_eaf= \"AF\"   args$ref_oa= \"REF\"   args$verbose= TRUE   args$freq_diff= 0.2   args$adjustment=NULL #\"ldsc\"   args$no_indel_alleles= FALSE   args$info_thresh= NULL   args$ancestry=\"EUR\" }"},{"path":"https://nicksunderland.github.io/heRmes/articles/ukbb_phenotyping.html","id":"example-phenotyping-of-ukbb-data","dir":"Articles","previous_headings":"","what":"Example phenotyping of UKBB data","title":"UKBB phenotyping example","text":"Phenotyping UK biobank hospital admissions data.","code":"pheno_ukbb <- phenotype(file_path,                          id_col    = \"eid\",                          code_cols = list(\"ICD10 codes\" = \"diag_icd10\", \"ICD9 codes\" = \"diag_icd9\"),                         include   = list(HF  = \"PH1645\", CM = \"PH1646\"),                          exclude   = list(congHD = \"PH1637\", MI = \"PH1636\", HCM = \"PH1640\"),                          gsub      = list(\"\\\\.\", \"\", c(\"x\")),                         name      = \"Heart Failure\")  plot(eulerr::euler(pheno_ukbb[, mget(names(pheno_ukbb)[!names(pheno_ukbb) %in% c(\"eid\", \"none\")])], shape = \"circle\"),           quantities = TRUE,           labels     = FALSE,           main       = list(label = \"UKBB Heart failure phenotyping\", fontsize = 8, font = 2),           legend     = list(fontsize = 8))"},{"path":"https://nicksunderland.github.io/heRmes/articles/ukbb_phenotyping.html","id":"plot-the-icd-10-hermes-phenotypes","dir":"Articles","previous_headings":"","what":"Plot the ICD-10 HERMES phenotypes","title":"UKBB phenotyping example","text":"Plot overlap HERMES phenotypes heart failure phenotypes UKHDR Phenotype library.","code":"plot_code_overlap(pheno_ids = hermes_phenos, types = c(\"ICD10 codes\"))"},{"path":"https://nicksunderland.github.io/heRmes/articles/ukbb_phenotyping.html","id":"co-occurrence-of-ukbb-icd-10-codes","dir":"Articles","previous_headings":"","what":"Co-occurrence of UKBB ICD-10 codes","title":"UKBB phenotyping example","text":"Co-occurrence matrix heart failure (PH1645) cardiomyopathy (PH1646) codes.","code":""},{"path":"https://nicksunderland.github.io/heRmes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicholas Sunderland. Author, maintainer.","code":""},{"path":"https://nicksunderland.github.io/heRmes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sunderland N (2025). heRmes: Tools Used HERMES Consortium. R package version 0.0.0.9000, https://nicksunderland.github.io/heRmes/.","code":"@Manual{,   title = {heRmes: Tools Used By The HERMES Consortium},   author = {Nicholas Sunderland},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://nicksunderland.github.io/heRmes/}, }"},{"path":"https://nicksunderland.github.io/heRmes/index.html","id":"hermes-","dir":"","previous_headings":"","what":"Tools Used By The HERMES Consortium","title":"Tools Used By The HERMES Consortium","text":"goal heRmes standardise heart failure phenotyping collections electronic health records.","code":""},{"path":"https://nicksunderland.github.io/heRmes/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools Used By The HERMES Consortium","text":"can install latest version heRmes like :","code":"# install.packages(\"devtools\") devtools::install_github(\"nicksunderland/heRmes\")"},{"path":"https://nicksunderland.github.io/heRmes/index.html","id":"phenotypes","dir":"","previous_headings":"","what":"Phenotypes","title":"Tools Used By The HERMES Consortium","text":"code lists underpinning various phenotypes stored text files within package structure : inst/extdata/ukhdr_phenotypes. format file matches used UKHDR Phenotype Library, important columns : code, description, coding_system.name, phenotype_id phenotype_name. example view available phenotypes obtain codes.","code":""},{"path":"https://nicksunderland.github.io/heRmes/index.html","id":"avaiable-phenotypes","dir":"","previous_headings":"Phenotypes","what":"Avaiable phenotypes","title":"Tools Used By The HERMES Consortium","text":"example, view first 5 phenotypes.","code":"get_phenotypes()[1:5] #>                         CCU002_02 Cardiomyopathy  #>                                         \"PH1002\"  #>                Acute Myocardial Infarction (AMI)  #>                                         \"PH1024\"  #>                  Heart Failure (fatal/non-fatal)  #>                                         \"PH1028\"  #> Congestive heart failure - Charlson primary care  #>                                         \"PH1055\"  #>    Myocardial infarction - Charlson primary care  #>                                         \"PH1062\""},{"path":"https://nicksunderland.github.io/heRmes/index.html","id":"codes","dir":"","previous_headings":"Phenotypes","what":"Codes","title":"Tools Used By The HERMES Consortium","text":"View codes PH1645 corresponding HERMES Heart Failure phenotype.","code":"# top 5 codes get_codes(pheno_id = \"PH1645\")[1:5, c(\"phenotype_id\", \"phenotype_name\", \"coding_system.name\", \"code\")] #>    phenotype_id phenotype_name coding_system.name   code #>          <char>         <char>             <char> <char> #> 1:       PH1645  Heart failure         ICD9 codes  40201 #> 2:       PH1645  Heart failure         ICD9 codes  42832 #> 3:       PH1645  Heart failure         ICD9 codes  42821 #> 4:       PH1645  Heart failure         ICD9 codes  42823 #> 5:       PH1645  Heart failure         ICD9 codes  42820"},{"path":"https://nicksunderland.github.io/heRmes/index.html","id":"phenotyping-a-dataset","dir":"","previous_headings":"Phenotypes","what":"Phenotyping a dataset","title":"Tools Used By The HERMES Consortium","text":"Create sample data. can long (one column containing diagnosis codes) wide format (multiple columns containing diagnosis codes). n.b. prioritising coding based diagnosis code position (e.g. primary vs. secondary vs. tertiary positions) currently supported. Phenotype individuals phenotype PH1643 (heart failure syndrome) PH1646 (cardiomyopathy), excluding phenotypes PH1637 (congenital heart disease) PH1636 (myocardial infarction). can multiple included excluded phenotypes given list.","code":"set.seed(2020) n   <- 10 dat <- data.frame(ids   = paste0(\"ID_\", c(1:(n/2), 1:(n/2))),                    codes = sample(c(\"I420\", \"foo\", \"bar\", \"baz\"), n, replace = TRUE),                    codes1 = sample(c(\"I420\", \"foo\", \"bar\", \"baz\"), n, replace = TRUE)) dat #>     ids codes codes1 #> 1  ID_1   baz   I420 #> 2  ID_2   baz   I420 #> 3  ID_3   bar    baz #> 4  ID_4   foo    baz #> 5  ID_5   baz    baz #> 6  ID_1  I420    foo #> 7  ID_2  I420    foo #> 8  ID_3   baz    baz #> 9  ID_4   foo    foo #> 10 ID_5   foo   I420 result <- phenotype(x         = dat,                      id_col    = \"ids\",                     code_cols = list(\"ICD10 codes\" = c(\"codes\", \"codes1\")),                      include   = list(\"PH1645\"),                      exclude   = list(\"PH1637\")) #> Phenotyping... #> [i] processing 10 records #> [i] pivoting data longer #> [i] getting inclusion phenotype codes from PhenoID(s) PH1645  #> [i] getting exclusion phenotype codes from PhenoID(s) PH1637  #> [i] assessing phenotype PH1645  #> [i] assessing phenotype PH1637  #> [i] summarising phenotyping of participants #> [i] finished result[] #>       ids PH1645 PH1637   none include exclude overall #>    <char> <lgcl> <lgcl> <lgcl>  <lgcl>  <lgcl>  <lgcl> #> 1:   ID_1  FALSE  FALSE   TRUE   FALSE   FALSE   FALSE #> 2:   ID_2  FALSE  FALSE   TRUE   FALSE   FALSE   FALSE #> 3:   ID_3  FALSE  FALSE   TRUE   FALSE   FALSE   FALSE #> 4:   ID_4  FALSE  FALSE   TRUE   FALSE   FALSE   FALSE #> 5:   ID_5  FALSE  FALSE   TRUE   FALSE   FALSE   FALSE"},{"path":"https://nicksunderland.github.io/heRmes/index.html","id":"code-formatting-issues","dir":"","previous_headings":"Phenotypes > Phenotyping a dataset","what":"Code formatting issues","title":"Tools Used By The HERMES Consortium","text":"Many coding systems slight formating differences - example ICD-10 code may appear I509 I50.9 dataset. phenotype() provides way clean codes use gsub argument. takes 3 element list: [[1]] string representing regular expression pattern, [[2]] replacement string, [[3]] character character vector can one : x (apply codes x), pheno (apply codes phenotypes), (apply everything), valid phenotype ID found include exclude (apply specific phenotype datasets). arguments can passed gsub .... important inspect dataset (x) phenotype coding (use get_codes()) prior running phenotyping avoid join issues related formatting differences. Output formatting can changed altering inputs. phenotype IDs named, names used column names result. overall result given column overall, although can renamed giving name parameter.","code":"# change format dat[10, \"codes1\"] <- \"I42.0\" dat[] #>     ids codes codes1 #> 1  ID_1   baz   I420 #> 2  ID_2   baz   I420 #> 3  ID_3   bar    baz #> 4  ID_4   foo    baz #> 5  ID_5   baz    baz #> 6  ID_1  I420    foo #> 7  ID_2  I420    foo #> 8  ID_3   baz    baz #> 9  ID_4   foo    foo #> 10 ID_5   foo  I42.0 # without dealing with the error ID_5 is incorrectly classified as no HF.  wrong <- phenotype(x         = dat,                     id_col    = \"ids\",                    code_cols = list(\"ICD10 codes\" = c(\"codes\", \"codes1\")),                    include   = list(HF     = \"PH1645\"),                     exclude   = list(congHD = \"PH1637\"),                     name      = \"Heart Failure\") #> Phenotyping... #> [i] processing 10 records #> [i] pivoting data longer #> [i] getting inclusion phenotype codes from PhenoID(s) PH1645  #> [i] getting exclusion phenotype codes from PhenoID(s) PH1637  #> [i] assessing phenotype PH1645  #> [i] assessing phenotype PH1637  #> [i] summarising phenotyping of participants #> [i] finished wrong[] #>       ids     HF congHD   none include exclude Heart Failure #>    <char> <lgcl> <lgcl> <lgcl>  <lgcl>  <lgcl>        <lgcl> #> 1:   ID_1  FALSE  FALSE   TRUE   FALSE   FALSE         FALSE #> 2:   ID_2  FALSE  FALSE   TRUE   FALSE   FALSE         FALSE #> 3:   ID_3  FALSE  FALSE   TRUE   FALSE   FALSE         FALSE #> 4:   ID_4  FALSE  FALSE   TRUE   FALSE   FALSE         FALSE #> 5:   ID_5  FALSE  FALSE   TRUE   FALSE   FALSE         FALSE # deal with formatting issue using gsub pheno <- phenotype(x         = dat,                     id_col    = \"ids\",                    code_cols = list(\"ICD10 codes\" = c(\"codes\", \"codes1\")),                    include   = list(HF     = \"PH1645\"),                     exclude   = list(congHD = \"PH1637\"),                     gsub      = list(\"\\\\.\", \"\", c(\"x\")),                    name      = \"Heart Failure\") #> Phenotyping... #> [i] processing 10 records #> [i] pivoting data longer #> [i] cleaning input codes with regex [ \\. ], replacement [  ] #> [i] getting inclusion phenotype codes from PhenoID(s) PH1645  #> [i] getting exclusion phenotype codes from PhenoID(s) PH1637  #> [i] assessing phenotype PH1645  #> [i] assessing phenotype PH1637  #> [i] summarising phenotyping of participants #> [i] finished pheno[] #>       ids     HF congHD   none include exclude Heart Failure #>    <char> <lgcl> <lgcl> <lgcl>  <lgcl>  <lgcl>        <lgcl> #> 1:   ID_1  FALSE  FALSE   TRUE   FALSE   FALSE         FALSE #> 2:   ID_2  FALSE  FALSE   TRUE   FALSE   FALSE         FALSE #> 3:   ID_3  FALSE  FALSE   TRUE   FALSE   FALSE         FALSE #> 4:   ID_4  FALSE  FALSE   TRUE   FALSE   FALSE         FALSE #> 5:   ID_5  FALSE  FALSE   TRUE   FALSE   FALSE         FALSE"},{"path":"https://nicksunderland.github.io/heRmes/index.html","id":"update-library-from-ukhdr","dir":"","previous_headings":"Phenotypes","what":"Update library from UKHDR","title":"Tools Used By The HERMES Consortium","text":"package’s phenotype library can updated UKHDR Phenotype Library API using function. queries library phenotypes matching enteries search_terms argument.","code":"update_library(search_terms = c(\"heart failure\", \"cardiomyopathy\", \"myocardial infarction\")) #> [i] reading phenotype id: PH25 - skipping, already exists #> [i] reading phenotype id: PH182 - skipping, already exists #> [i] reading phenotype id: PH530 - skipping, already exists #> [i] reading phenotype id: PH531 - skipping, already exists #> [i] reading phenotype id: PH631 - skipping, already exists #> [i] reading phenotype id: PH687 - skipping, already exists #> [i] reading phenotype id: PH968 - skipping, already exists #> [i] reading phenotype id: PH993 - skipping, already exists #> [i] reading phenotype id: PH1028 - skipping, already exists #> [i] reading phenotype id: PH1055 - skipping, already exists #> [i] reading phenotype id: PH1074 - skipping, already exists #> [i] reading phenotype id: PH1603 - skipping, already exists #> [i] reading phenotype id: PH129 - skipping, already exists #> [i] reading phenotype id: PH145 - skipping, already exists #> [i] reading phenotype id: PH185 - skipping, already exists #> [i] reading phenotype id: PH961 - skipping, already exists #> [i] reading phenotype id: PH1002 - skipping, already exists #> [i] reading phenotype id: PH215 - skipping, already exists #> [i] reading phenotype id: PH356 - skipping, already exists #> [i] reading phenotype id: PH481 - skipping, already exists #> [i] reading phenotype id: PH530 - skipping, already exists #> [i] reading phenotype id: PH611 - skipping, already exists #> [i] reading phenotype id: PH612 - skipping, already exists #> [i] reading phenotype id: PH613 - skipping, already exists #> [i] reading phenotype id: PH741 - skipping, already exists #> [i] reading phenotype id: PH886 - skipping, already exists #> [i] reading phenotype id: PH942 - skipping, already exists #> [i] reading phenotype id: PH949 - skipping, already exists #> [i] reading phenotype id: PH988 - skipping, already exists #> [i] reading phenotype id: PH1024 - skipping, already exists #> [i] reading phenotype id: PH1062 - skipping, already exists"},{"path":"https://nicksunderland.github.io/heRmes/index.html","id":"update-library-from-ukhdr-unpublished","dir":"","previous_headings":"Phenotypes","what":"Update library from UKHDR (unpublished)","title":"Tools Used By The HERMES Consortium","text":"package’s phenotype library can updated unpublished/development phenotypes UKHDR Phenotype Library API using function. However, since unpublished phenotypes searchable name, need pass exact ID also login details website (stored local .Renviron file example.)","code":"# development phenotypes, ids named for readability only hermes_phenos <- c(`Congenital heart disease`    = \"PH1637\",                    `Heart failure`               = \"PH1645\")  # update update_library(search_terms = c(),                 ids          = hermes_phenos,                 UKHDR_UN     = Sys.getenv(\"UKHDR_UN\"),                 UKHDR_PW     = Sys.getenv(\"UKHDR_PW\"))"},{"path":"https://nicksunderland.github.io/heRmes/index.html","id":"plotting-phenotype","dir":"","previous_headings":"Phenotypes","what":"Plotting phenotype","title":"Tools Used By The HERMES Consortium","text":"see intersection codes two phenotype files use plot_code_overlap() function.","code":"plot_code_overlap(pheno_ids = c(\"PH1645\", \"PH1028\", \"PH1055\", \"PH1074\", \"PH182\", \"PH25\", \"PH530\", \"PH531\", \"PH631\", \"PH687\", \"PH968\", \"PH993\"),                    types = c(\"ICD10 codes\", \"ICD9 codes\", \"OPCS4 codes\", \"Read codes v2\"))"},{"path":"https://nicksunderland.github.io/heRmes/index.html","id":"esc-primary-cardiomyopathy-phenotypes","dir":"","previous_headings":"Phenotypes","what":"ESC primary cardiomyopathy phenotypes","title":"Tools Used By The HERMES Consortium","text":"primary cardiomyopathy phenotypes described ESC cardiomyopathy guidelines.","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/get_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"get phenotype codes — get_codes","title":"get phenotype codes — get_codes","text":"get phenotype codes","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/get_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get phenotype codes — get_codes","text":"","code":"get_codes(pheno_id, strip = \"\\\\.\")"},{"path":"https://nicksunderland.github.io/heRmes/reference/get_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get phenotype codes — get_codes","text":"pheno_id string, valid phenotype id (see get_phenotypes()) strip regular expression strip codes, NULL stripping","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/get_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get phenotype codes — get_codes","text":"data.table","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"get phenotype meta-data — get_metadata","title":"get phenotype meta-data — get_metadata","text":"get phenotype meta-data","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get phenotype meta-data — get_metadata","text":"","code":"get_metadata(pheno_id)"},{"path":"https://nicksunderland.github.io/heRmes/reference/get_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get phenotype meta-data — get_metadata","text":"pheno_id string, valid phenotype id (see get_phenotypes())","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/get_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get phenotype meta-data — get_metadata","text":"data.table","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/get_phenotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get phenotypes — get_phenotypes","title":"Get phenotypes — get_phenotypes","text":"Get phenotypes","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/get_phenotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get phenotypes — get_phenotypes","text":"","code":"get_phenotypes()"},{"path":"https://nicksunderland.github.io/heRmes/reference/get_phenotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get phenotypes — get_phenotypes","text":"character vector potential phenotypes","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/heRmes-package.html","id":null,"dir":"Reference","previous_headings":"","what":"heRmes: Tools Used By The HERMES Consortium — heRmes-package","title":"heRmes: Tools Used By The HERMES Consortium — heRmes-package","text":"collection tools phenotyping processing heart failure GWAS data.","code":""},{"path":[]},{"path":"https://nicksunderland.github.io/heRmes/reference/heRmes-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"heRmes: Tools Used By The HERMES Consortium — heRmes-package","text":"Maintainer: Nicholas Sunderland nicholas.sunderland@bristol.ac.uk (ORCID)","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/phenotype.html","id":null,"dir":"Reference","previous_headings":"","what":"Phenotype — phenotype","title":"Phenotype — phenotype","text":"Phenotype","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/phenotype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phenotype — phenotype","text":"","code":"phenotype(   x,   id_col,   include,   exclude = NULL,   code_cols = list(`ICD9 codes` = NULL, `ICD10 codes` = NULL, `OPCS4 codes` = NULL,     `Read codes v2` = NULL, `Read codes v3` = NULL),   gsub = NULL,   name = \"overall\",   include_multi = \"any\",   exclude_multi = \"any\",   verbose = TRUE,   ... )"},{"path":"https://nicksunderland.github.io/heRmes/reference/phenotype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Phenotype — phenotype","text":"x data.frame like object file path readable data.table::fread id_col string, name id column include string list strings, valid phenotype id (see get_phenotypes()) exclude string list strings, valid phenotype id (see get_phenotypes()) code_cols list named strings, diagnosis procedure code column(s). List elements must one icd9, icd10, opcs, readv2, readv3 gsub list characters length 3, pre-processing phenotype codes /codes x. E.g. c(\".\", \"\", \"\"). NULL turn . Element 1: character, regex pattern. Element 2: character, replacement string. Element 3: character vector, one : 'x' (apply codes x ), 'pheno' (apply codes pheno files ), '' (apply x pheno files), phenotype_id include exclude (apply phenotype). name string, name phenotype include_multi string, deal multiple include phenotypes, either '' (required) '' (required) exclude_multi string, deal multiple exclude phenotypes, either '' (required) '' (required) verbose logical, print progress ... parameters passed gsub","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/phenotype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Phenotype — phenotype","text":"data.table","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/plot_code_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot phenotype code overlap — plot_code_overlap","title":"Plot phenotype code overlap — plot_code_overlap","text":"Plot phenotype code overlap","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/plot_code_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot phenotype code overlap — plot_code_overlap","text":"","code":"plot_code_overlap(   pheno_ids = c(\"PH_HF_HERMES_3.0\", \"PH25\", \"PH129\"),   types = c(\"ICD10 codes\", \"ICD9 codes\", \"OPCS4 codes\", \"Read codes v2\", \"Med codes\",     \"SNOMED  CT codes\", \"OXMIS codes\") )"},{"path":"https://nicksunderland.github.io/heRmes/reference/plot_code_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot phenotype code overlap — plot_code_overlap","text":"pheno_ids list strings, valid phenotype IDs types vector strings, one c(\"ICD10 codes\", \"ICD9 codes\", \"OPCS4 codes\", \"Read codes v2\", \"Med codes\", \"SNOMED  CT codes\", \"OXMIS codes\")","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/plot_code_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot phenotype code overlap — plot_code_overlap","text":"plot","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/update_library.html","id":null,"dir":"Reference","previous_headings":"","what":"Update code library — update_library","title":"Update code library — update_library","text":"Update internal code library Concept Library API","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/update_library.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update code library — update_library","text":"","code":"update_library(   search_terms = c(\"heart failure\", \"cardiomyopathy\", \"myocardial infarction\"),   ids = NULL,   UKHDR_UN = NULL,   UKHDR_PW = NULL )"},{"path":"https://nicksunderland.github.io/heRmes/reference/update_library.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update code library — update_library","text":"search_terms vector strings search concept library phenotypes ids vector phenotypes IDs pull UKHDR_UN UK-HDR website username (pulling unpublished phenotypes) UKHDR_PW UK-HDR website password (pulling unpublished phenotypes)","code":""},{"path":"https://nicksunderland.github.io/heRmes/reference/update_library.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update code library — update_library","text":"boolean, success status","code":""}]
