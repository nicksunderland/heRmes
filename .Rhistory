})
)
dat <- data.table::melt(dat,
id.vars = id_col,
measure.vars = unlist(code_cols),
variable.name = "col_name",
value.name = "code",
na.rm = TRUE)
View(dat)
dat <- dat[code != "", ]
View(dat)
dat[code_types, code_type := i.code_type, on = "col_name"]
View(dat)
dat[, col_name := NULL]
View(dat)
include  = list(HFsyn  = "PH1643", CM = "PH1646")
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640")
gsub     = list("\\.", "", c("x"))
name     = "Heart Failure"
# gsub codes if needed
if (!is.null(gsub) && any(gsub[[3]] %in% c("x", "both"))) {
if (verbose) cat("[i] cleaning input codes with regex [", gsub[[1]], "], replacement [", gsub[[2]], "]\n")
dat[, code := gsub(gsub[[1]], gsub[[2]], code, ...)]
}
if (verbose) cat("[i] getting inclusion phenotype codes from PhenoID(s)", paste0(include, collapse = ", "), "\n")
include_codes <- lapply(include, function(x) get_codes(x))
if (is.null(names(include))) {
names(include_codes) <- include
}
if (!is.null(exclude)) {
if (verbose) cat("[i] getting exclusion phenotype codes from PhenoID(s)", paste0(exclude, collapse = ", "), "\n")
exclude_codes <- lapply(exclude, function(x) get_codes(x))
if (is.null(names(exclude))) {
names(exclude_codes) <- exclude
}
} else {
exclude_codes <- list()
}
i=1
if (verbose) cat("[i] assessing phenotype", include[[i]], "\n")
!is.null(gsub) && any(gsub[[3]] %in% c("pheno", "both", include[[i]]))
unique(conghd$coding_system.name)
code_cols = list("ICD10 codes" = c("diag_icd10"), "ICD9 codes" = "diag_icd9")
dat=x
code_types <- data.table::rbindlist(
lapply(names(code_cols), function(x) {
data.frame(code_type = x, col_name = code_cols[[x]])
})
)
code_types
dat <- data.table::melt(dat,
id.vars       = id_col,
measure.vars  = unlist(code_cols),
variable.name = "col_name",
value.name    = "code",
na.rm         = TRUE)
dat <- dat[code != "", ]
dat[code_types, code_type := i.code_type, on = "col_name"]
dat[, col_name := NULL]
View(dat)
include_codes[[i]]
dat
dat[include_codes[[i]], names(include_codes)[i] := TRUE, on = c("code" = "code", "code_type" = "coding_system.name")]
View(dat)
dat[is.na(get(names(include_codes)[i])), names(include_codes)[i] := FALSE]
View(dat)
dat[exclude_codes[[i]], names(exclude_codes)[i] := TRUE, on = c("code" = "code", "code_type" = "coding_system.name")]
dat[is.na(get(names(exclude_codes)[i])), names(exclude_codes)[i] := FALSE]
View(dat)
res <- dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = id_col]
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
# conghd <- get_codes("PH1637")
# diag <- data.table::fread(diag_path)
# diag[conghd, c("conghd_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
#
# foo = diag[, any(!is.na(conghd_icd)), by = c("eid", "desc")]
pheno <- phenotype(diag_path,
id_col   = "eid",
code_cols = list(icd10 = "diag_icd10", icd9 = "diag_icd9"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
unlist(code_cols)
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
# conghd <- get_codes("PH1637")
# diag <- data.table::fread(diag_path)
# diag[conghd, c("conghd_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
#
# foo = diag[, any(!is.na(conghd_icd)), by = c("eid", "desc")]
pheno <- phenotype(diag_path,
id_col   = "eid",
code_cols = list(icd10 = "diag_icd10", icd9 = "diag_icd9"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
# conghd <- get_codes("PH1637")
# diag <- data.table::fread(diag_path)
# diag[conghd, c("conghd_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
#
# foo = diag[, any(!is.na(conghd_icd)), by = c("eid", "desc")]
pheno <- phenotype(diag_path,
id_col   = "eid",
code_cols = list(icd10 = "diag_icd10", icd9 = "diag_icd9"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
# conghd <- get_codes("PH1637")
# diag <- data.table::fread(diag_path)
# diag[conghd, c("conghd_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
#
# foo = diag[, any(!is.na(conghd_icd)), by = c("eid", "desc")]
pheno <- phenotype(diag_path,
id_col   = "eid",
code_cols = list("ICD10 codes" = "diag_icd10", "ICD9 codes" = "diag_icd9"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
# conghd <- get_codes("PH1637")
# diag <- data.table::fread(diag_path)
# diag[conghd, c("conghd_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
#
# foo = diag[, any(!is.na(conghd_icd)), by = c("eid", "desc")]
pheno <- phenotype(diag_path,
id_col   = "eid",
code_cols = list("ICD10 codes" = "diag_icd10", "ICD9 codes" = "diag_icd9"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
View(pheno)
p <- plot(eulerr::euler(pheno[,-1], shape = "circle"),
quantities = TRUE,
labels     = FALSE,
# main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
p
library(ggplot2)
pheno[,-1][, lapply(.SD, sum)]
mi <- get_codes("PH1636")
View(mi)
mi <- get_codes("PH1636")
diag <- data.table::fread(diag_path)
diag[mi, c("mi_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
View(diag)
View(mi)
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
diag <- data.table::fread(diag_path)
x = diag[1:10, ]
id_col   = "eid"
code_cols = list("ICD10 codes" = "diag_icd10", "ICD9 codes" = "diag_icd9")
include  = list(HFsyn  = "PH1643", CM = "PH1646")
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640")
gsub     = list("\\.", "", c("x"))
name     = "Heart Failure"
include_multi = "any"
verbose = TRUE
dat = x
code_types <- data.table::rbindlist(
lapply(names(code_cols), function(x) {
data.frame(code_type = x, col_name = code_cols[[x]])
})
)
dat <- data.table::melt(dat,
id.vars       = id_col,
measure.vars  = unlist(code_cols),
variable.name = "col_name",
value.name    = "code",
na.rm         = TRUE)
dat <- dat[code != "", ]
dat[code_types, code_type := i.code_type, on = "col_name"]
dat[, col_name := NULL]
View(dat)
dat = diag
code_types <- data.table::rbindlist(
lapply(names(code_cols), function(x) {
data.frame(code_type = x, col_name = code_cols[[x]])
})
)
dat <- data.table::melt(dat,
id.vars       = id_col,
measure.vars  = unlist(code_cols),
variable.name = "col_name",
value.name    = "code",
na.rm         = TRUE)
dat <- dat[code != "", ]
dat[code_types, code_type := i.code_type, on = "col_name"]
dat[, col_name := NULL]
View(dat)
# get the inclusion codes
if (verbose) cat("[i] getting inclusion phenotype codes from PhenoID(s)", paste0(include, collapse = ", "), "\n")
include_codes <- lapply(include, function(x) get_codes(x))
if (is.null(names(include))) {
names(include_codes) <- include
}
# get the exclusion codes
if (!is.null(exclude)) {
if (verbose) cat("[i] getting exclusion phenotype codes from PhenoID(s)", paste0(exclude, collapse = ", "), "\n")
exclude_codes <- lapply(exclude, function(x) get_codes(x))
if (is.null(names(exclude))) {
names(exclude_codes) <- exclude
}
} else {
exclude_codes <- list()
}
View(include_codes)
mi = exclude_codes$MI
View(mi)
gsub=NULL
for (i in seq_along(include_codes)) {
if (verbose) cat("[i] assessing phenotype", include[[i]], "\n")
# gsub codes if needed
if (!is.null(gsub) && any(gsub[[3]] %in% c("pheno", "both", include[[i]]))) {
if (verbose) cat("[i] cleaning phenotype codes with regex [", gsub[[1]], "], replacement [", gsub[[2]], "]\n")
include_codes[[i]][, code := gsub(gsub[[1]], gsub[[2]], code, ...)]
include_codes[[i]] <- include_codes[[i]][code != "", ]
}
dat[include_codes[[i]], names(include_codes)[i] := TRUE, on = c("code" = "code", "code_type" = "coding_system.name")]
dat[is.na(get(names(include_codes)[i])), names(include_codes)[i] := FALSE]
}
# parse the exclude codes
for (i in seq_along(exclude_codes)) {
if (verbose) cat("[i] assessing phenotype", exclude[[i]], "\n")
# gsub codes if needed
if (!is.null(exclude) && !is.null(gsub) && any(gsub[[3]] %in% c("pheno", "both", exclude[[i]]))) {
if (verbose) cat("[i] cleaning phenotype codes with regex [", gsub[[1]], "], replacement [", gsub[[2]], "]\n")
exclude_codes[[i]][, code := gsub(gsub[[1]], gsub[[2]], code, ...)]
exclude_codes[[i]] <- exclude_codes[[i]][code != "", ]
}
dat[exclude_codes[[i]], names(exclude_codes)[i] := TRUE, on = c("code" = "code", "code_type" = "coding_system.name")]
dat[is.na(get(names(exclude_codes)[i])), names(exclude_codes)[i] := FALSE]
}
View(dat)
if (verbose) cat("[i] summarising phenotyping of participants\n")
res <- dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = id_col]
View(res)
sum(res$MI)
res[, none := rowSums(.SD)==0, .SDcols = names(res)[-1]]
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
# mi <- get_codes("PH1636")
# diag <- data.table::fread(diag_path)
# diag[mi, c("mi_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
# #
# foo = diag[, any(!is.na(conghd_icd)), by = c("eid", "desc")]
pheno <- phenotype(diag_path,
id_col   = "eid",
code_cols = list("ICD10 codes" = "diag_icd10", "ICD9 codes" = "diag_icd9"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
View(pheno)
p <- plot(eulerr::euler(pheno[,-1], shape = "circle"),
quantities = TRUE,
labels     = FALSE,
# main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
p
pheno[,names(pheno)[names(pheno) %in% c("eid", "none")]
]
pheno[, mget(names(pheno)[names(pheno) %in% c("eid", "none")])]
p <- plot(eulerr::euler(pheno[, mget(names(pheno)[!names(pheno) %in% c("eid", "none")])], shape = "circle"),
quantities = TRUE,
labels     = FALSE,
# main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
p
library(heRmes)
file_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
pheno_ukbb <- phenotype(file_path,
id_col    = "eid",
code_cols = list("ICD10 codes" = "diag_icd10", "ICD9 codes" = "diag_icd9"),
include   = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude   = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub      = list("\\.", "", c("x")),
name      = "Heart Failure")
plot(eulerr::euler(pheno_ukbb[, mget(names(pheno)[!names(pheno) %in% c("eid", "none")])], shape = "circle"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = "UKBB Heart failure phenotyping", fontsize = 8, font = 2),
legend     = list(fontsize = 8))
plot(eulerr::euler(pheno_ukbb[, mget(names(pheno_ukbb)[!names(pheno_ukbb) %in% c("eid", "none")])], shape = "circle"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = "UKBB Heart failure phenotyping", fontsize = 8, font = 2),
legend     = list(fontsize = 8))
document()
check()
check()
document()
document()
document()
document()
check()
install()
install()
library(heRmes)
hf_codes <- get_codes("PH1645")
cm_codes <- get_codes("PH1647")
codes <- rbind(hf_codes, cm_codes)
codes <- codes[coding_system.name == "ICD10 codes", ]
file_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
dat <- data.table::fread(file_path)
dat <- dat[diag_icd10 %in% codes$code, ]
dat[codes, description := i.description, on = c("diag_icd10" = "code")]
V <- crossprod(table(unique(dat[, .(eid, description)]))) |> as.matrix()
View(V)
foo = table(unique(dat[, .(eid, description)]))
foo
View(foo)
V <- crossprod(table(unique(dat[, .(eid, description)])))
View(V)
rowSums(V) == colSums(V)
all(rowSums(V) == colSums(V))
diag(V) <- rowSums(V)
V <- apply(V, 2, function(x) x / matrix(diag(V), ncol = 1))
hf_codes <- get_codes("PH1645")
cm_codes <- get_codes("PH1647")
codes <- rbind(hf_codes, cm_codes)
codes <- codes[coding_system.name == "ICD10 codes", ]
file_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
dat <- data.table::fread(file_path)
dat <- dat[diag_icd10 %in% codes$code, ]
dat[codes, description := i.description, on = c("diag_icd10" = "code")]
V <- crossprod(table(unique(dat[, .(eid, description)]))) |> as.matrix()
diag(V) <- rowSums(V)
V <- apply(V, 2, function(x) x / matrix(diag(V), ncol = 1))
diag_names <- data.table(description = colnames(V))
View(V)
hf_codes <- get_codes("PH1645")
cm_codes <- get_codes("PH1647")
codes <- rbind(hf_codes, cm_codes)
codes <- codes[coding_system.name == "ICD10 codes", ]
file_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
dat <- data.table::fread(file_path)
dat <- dat[diag_icd10 %in% codes$code, ]
dat[codes, description := i.description, on = c("diag_icd10" = "code")]
V <- crossprod(table(unique(dat[, .(eid, description)]))) |> as.matrix()
diag(V) <- rowSums(V)
V <- apply(V, 2, function(x) x / matrix(diag(V), ncol = 1))
diag_names <- data.table::data.table(description = colnames(V))
diag_names[dat, code := i.diag_icd10, on = "description"]
diag_names <- paste0(diag_names$description, " (", diag_names$code, ")")
V <- cbind(V, N)
hf_codes <- get_codes("PH1645")
cm_codes <- get_codes("PH1647")
codes <- rbind(hf_codes, cm_codes)
codes <- codes[coding_system.name == "ICD10 codes", ]
file_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
dat <- data.table::fread(file_path)
dat <- dat[diag_icd10 %in% codes$code, ]
dat[codes, description := i.description, on = c("diag_icd10" = "code")]
V <- crossprod(table(unique(dat[, .(eid, description)]))) |> as.matrix()
N <- rowSums(V)
diag(V) <- N
V <- apply(V, 2, function(x) x / matrix(diag(V), ncol = 1))
diag_names <- data.table::data.table(description = colnames(V))
diag_names[dat, code := i.diag_icd10, on = "description"]
diag_names <- paste0(diag_names$description, " (", diag_names$code, ")")
V <- cbind(V, N)
V <- rbind(V, c(t(N), 0))
MORE_LETTERS <- c(LETTERS, paste0("A", LETTERS))
rownames(V) <- c(paste0(diag_names, " - ", MORE_LETTERS[1:length(diag_names)]), "Num")
colnames(V) <- c(MORE_LETTERS[1:length(diag_names)], "Num")
Vmelt <- reshape2::melt(V) |> data.table::as.data.table()
names(Vmelt) <- c("ICD10_1", "ICD10_2", "value")
ggplot(Vmelt, aes(x = ICD10_2, y = ICD10_1, fill = value, label = round(value, 2))) +
geom_tile(color = "white") +
geom_text(size = 2, aes(color = grepl("Num", ICD10_1) | grepl("Num", ICD10_2)), show.legend = FALSE) +
scale_fill_gradient(low = "white", high = "blue", limits = c(0, 1)) +
scale_color_manual(values = c("TRUE" = "white", "FALSE" = "black")) +
theme_minimal() +
labs(x = "Diagnosed ICD10 (X)", y = "Diagnosed ICD10 (Y)",
title = "Co-occurrence of ICD10 codes",
subtitle = "Ratio of probability of co-occurrence X&Y versus only code Y",
fill = "P(X,Y)/P(Y)") +
coord_fixed()
library(ggplot2)
ggplot(Vmelt, aes(x = ICD10_2, y = ICD10_1, fill = value, label = round(value, 2))) +
geom_tile(color = "white") +
geom_text(size = 2, aes(color = grepl("Num", ICD10_1) | grepl("Num", ICD10_2)), show.legend = FALSE) +
scale_fill_gradient(low = "white", high = "blue", limits = c(0, 1)) +
scale_color_manual(values = c("TRUE" = "white", "FALSE" = "black")) +
theme_minimal() +
labs(x = "Diagnosed ICD10 (X)", y = "Diagnosed ICD10 (Y)",
title = "Co-occurrence of ICD10 codes",
subtitle = "Ratio of probability of co-occurrence X&Y versus only code Y",
fill = "P(X,Y)/P(Y)") +
coord_fixed()
ggplot(Vmelt, aes(x = ICD10_2, y = ICD10_1, fill = value, label = round(value, 2))) +
geom_tile(color = "white") +
geom_text(size = 2, aes(color = grepl("Num", ICD10_1) | grepl("Num", ICD10_2)), show.legend = FALSE) +
scale_fill_gradient(low = "white", high = "blue", limits = c(0, 1)) +
scale_color_manual(values = c("TRUE" = "white", "FALSE" = "black")) +
theme_minimal() +
labs(x = "Diagnosed ICD10 (X)", y = "Diagnosed ICD10 (Y)",
title = "Co-occurrence of ICD10 codes",
subtitle = "Ratio of probability of co-occurrence X&Y versus only code Y",
fill = "P(X,Y)/P(Y)") +
coord_fixed()
3/15
ggplot(Vmelt, aes(x = ICD10_2, y = ICD10_1, fill = value, label = round(value, 2))) +
geom_tile(color = "white") +
geom_text(size = 2, aes(color = grepl("Num", ICD10_1) | grepl("Num", ICD10_2)), show.legend = FALSE) +
scale_fill_gradient(low = "white", high = "blue", limits = c(0, 1)) +
scale_color_manual(values = c("TRUE" = "white", "FALSE" = "black")) +
theme_minimal() +
labs(x = "Diagnosed ICD10 (X)", y = "Diagnosed ICD10 (Y)",
title = "Co-occurrence of ICD10 codes",
subtitle = "Proportion of co-occurrence X&Y versus all Y codes",
fill = "(X&Y)/sum(Y) %") +
coord_fixed()
library(heRmes)
devtools::check()
devtools::install()
library(heRmes)
hf_codes <- get_codes("PH1645")
cm_codes <- get_codes("PH1647")
hf_codes <- get_codes("PH1645")
codes <- rbind(hf_codes, cm_codes)
# cm_codes <- get_codes("PH1647")
codes <- rbind(hf_codes) #, cm_codes)
codes <- codes[coding_system.name == "ICD10 codes", ]
file_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
dat <- data.table::fread(file_path)
dat[codes, description := i.description, on = c("diag_icd10" = "code")]
View(dat)
hf_codes <- get_codes("PH1645")
# cm_codes <- get_codes("PH1647")
codes <- rbind(hf_codes) #, cm_codes)
codes <- codes[coding_system.name == "ICD10 codes", ]
file_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
dat <- data.table::fread(file_path)
dat <- dat[diag_icd10 %in% codes$code, ]
dat[codes, description := i.description, on = c("diag_icd10" = "code")]
V <- crossprod(table(unique(dat[, .(eid, description)]))) |> as.matrix()
View(V)
library(devtools )
use_data_raw("HERMES_3.0_CODES")
foo <- "To be completed"
# Congenital heart disease
HERMES_3_CONGENITAL <- foo
usethis::use_data(HERMES_3_CONGENITAL, overwrite = TRUE)
foo <- "To be completed"
# Congenital heart disease
HERMES_3_CONGENITAL_HEART_DISEASE <- foo
usethis::use_data(HERMES_3_CONGENITAL_HEART_DISEASE, overwrite = TRUE)
# Heart failure
HERMES_3_HEART_FAILURE <- foo
usethis::use_data(HERMES_3_HEART_FAILURE, overwrite = TRUE)
# Coronary artery disease
HERMES_3_CORONARY_ARTERY_DISEASE <- foo
usethis::use_data(HERMES_3_CORONARY_ARTERY_DISEASE, overwrite = TRUE)
use_vignette("hermes_3_codes")
use_vignette("ukbb_phenotyping")
install()
BibTexLibraries::get_bib_path('hermes')
BibTexLibraries::get_bib_path()
library(heRmes)
pkgdown::build_site()
pkgdown::build_site()
library(heRmes)
Sys.getenv("UKHDR_UN")
# update
update_library(search_terms = c(),
ids          = hermes_phenos,
UKHDR_UN     = Sys.getenv("UKHDR_UN"),
UKHDR_PW     = Sys.getenv("UKHDR_PW"))
?update_library
hermes_phenos <- c(`Congenital heart disease`    = "PH1637",
`Heart failure`               = "PH1645")
# update
update_library(search_terms = c(),
ids          = hermes_phenos,
UKHDR_UN     = Sys.getenv("UKHDR_UN"),
UKHDR_PW     = Sys.getenv("UKHDR_PW"))
hermes_phenos <- c(`Congenital heart disease`    = "PH1637",
`Heart failure`               = "PH1645")
# update
update_library(search_terms = c(),
ids          = hermes_phenos,
UKHDR_UN     = Sys.getenv("UKHDR_UN"),
UKHDR_PW     = Sys.getenv("UKHDR_PW"))
devtools::load_all()
hermes_phenos <- c(`Congenital heart disease`    = "PH1637",
`Heart failure`               = "PH1645")
# update
update_library(search_terms = c(),
ids          = hermes_phenos,
UKHDR_UN     = Sys.getenv("UKHDR_UN"),
UKHDR_PW     = Sys.getenv("UKHDR_PW"))
pkgdown::build_site()
