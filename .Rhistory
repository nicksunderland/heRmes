res <- dat[, c(names(include_codes), names(exclude_codes)) := lapply(.SD, any), .SDcols = c(names(include_codes), names(exclude_codes)), by = "id"]
View(res)
dat[, lapply(.SD, any), .SDcols = c(names(include_codes), names(exclude_codes)), by = "id"]
dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = "id"]
View(res)
View(res)
# compute the result
res <- dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = "id"]
View(res)
res[, (name) := rowSums(mget(names(include_codes)))]
names(include_codes)
res[, (name) := rowSums(.SD[, names(include_codes)])]
res[, (name) := rowSums(.SD[, names(include_codes)])]
if (length(names(include_codes)) > 1) {
res[, include := rowSums(.SD), .SDcols = names(include_codes)]
} else {
res[, include := get(names(include_codes))]
}
View(res)
if (length(names(exclude_codes)) > 1) {
res[, exclude := rowSums(.SD), .SDcols = names(exclude_codes)]
} else {
res[, exclude := get(names(exclude_codes))]
}
View(res)
# summarise / compute the result
res <- dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = "id"]
# inclusions
if (length(names(include_codes)) > 1) {
res[, include := rowSums(.SD), .SDcols = names(include_codes)]
} else {
res[, include := get(names(include_codes))]
}
# exclusions
if (length(names(exclude_codes)) == 0) {
res[, exclude := FALSE]
} else if (length(names(exclude_codes)) == 1) {
res[, exclude := get(names(exclude_codes))]
} else {
res[, exclude := rowSums(.SD), .SDcols = names(exclude_codes)]
}
# final phenotype
res[, (name) := include & !exclude]
View(res)
load_all()
install()
phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HF = "PH1645"),
exclude = list(congHD = "PH1637"))
result <- phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HF = "PH1645"),
exclude = list(congHD = "PH1637"))
load_all()
load_all()
install()
load_all()
library(heRmes)
result <- phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1645"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
result <- phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1645"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
load_all()
result <- phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1645"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
ids     = dat$ids
set.seed(2020)
n   <- 10
dat <- data.frame(ids   = paste0("ID_", c(1:(n/2), 1:(n/2))),
codes = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE))
dat
result <- phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1645"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
View(result)
result <- phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1645", CM = "PH1646"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
View(dat)
View(result)
result <- phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
View(result)
load_all()
phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude = list(congHD = "PH1637", mi = "PH1636"))[]
phenotype(ids     = dat$ids,
codes   = dat$codes,
include = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude = list(congHD = "PH1637", mi = "PH1636"))[]
install()
?data.table::melt
View(dat)
set.seed(2020)
n   <- 10
dat <- data.frame(ids   = paste0("ID_", c(1:(n/2), 1:(n/2))),
codes = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE),
codes1 = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE))
dat
code_col=c("codes", "codes1")
id_col="ids"
dat[, names(dat)[!names(dat) %in% c(id_col, code_col)] := NULL]
x=dat
# create the data.table
dat <- data.table::as.data.table(x)
# remove other data
dat[, names(dat)[!names(dat) %in% c(id_col, code_col)] := NULL]
View(dat)
length(code_col) > 1
data.table::melt(dat, id.vars = id_col, variable.name = "code_var", value.name = "code", na.rm = TRUE)
View(dat)
dat[6:7, codes1 := NA_character_]
View(dat)
data.table::melt(dat, id.vars = id_col, variable.name = "code_var", value.name = "code", na.rm = TRUE)
data.table::melt(dat, id.vars = id_col, variable.name = "code_var", value.name = "code")
dat[, code_var := NULL]
dat <- data.table::melt(dat, id.vars = id_col, variable.name = "code_var", value.name = "code", na.rm = TRUE)
dat[, code_var := NULL]
View(dat)
# get the inclusion codes
include_codes <- lapply(include, function(x) get_codes(x))
load_all()
load_all()
load_all()
load_all()
load_all()
library(heRmes)
set.seed(2020)
n   <- 10
dat <- data.frame(ids   = paste0("ID_", c(1:(n/2), 1:(n/2))),
codes = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE),
codes1 = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE))
dat
result <- phenotype(x        = dat,
id_col   = "ids",
code_col = c("codes", "code1"),
name     = "Heart Failure",
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", mi = "PH1636"))
load_all()
result <- phenotype(x        = dat,
id_col   = "ids",
code_col = c("codes", "code1"),
name     = "Heart Failure",
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", mi = "PH1636"))
View(result)
set.seed(2020)
n   <- 10
dat <- data.frame(ids   = paste0("ID_", c(1:(n/2), 1:(n/2))),
codes = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE),
codes1 = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE))
dat
result <- phenotype(x        = dat,
id_col   = "ids",
code_col = c("codes", "code1"),
name     = "Heart Failure",
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", mi = "PH1636"))
result[]
id_col   = "ids"
code_col = c("codes", "code1")
name     = "Heart Failure"
include  = list(HFsyn  = "PH1643", CM = "PH1646")
exclude  = list(congHD = "PH1637", mi = "PH1636")
include_multi = "any"
exclude_multi = "any"
include_multi <- match.arg(include_multi, choices = c("any", "all"))
exclude_multi <- match.arg(exclude_multi, choices = c("any", "all"))
# create the data.table
dat <- data.table::as.data.table(x)
x = dat
# create the data.table
dat <- data.table::as.data.table(x)
# remove other data
dat[, names(dat)[!names(dat) %in% c(id_col, code_col)] := NULL]
View(dat)
View(x)
# create the data.table
dat <- data.table::as.data.table(x)
View(dat)
c(id_col, code_col)
dat[, names(dat)[!names(dat) %in% c(id_col, code_col)] := NULL]
View(dat)
result <- phenotype(x        = dat,
id_col   = "ids",
code_col = c("codes", "codes1"),
name     = "Heart Failure",
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", mi = "PH1636"))
View(result)
set.seed(2020)
n   <- 10
dat <- data.frame(ids   = paste0("ID_", c(1:(n/2), 1:(n/2))),
codes = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE),
codes1 = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE))
dat
x        = dat
id_col   = "ids"
code_col = c("codes", "codes1")
# checks
include_multi <- match.arg(include_multi, choices = c("any", "all"))
exclude_multi <- match.arg(exclude_multi, choices = c("any", "all"))
# create the data.table
dat <- data.table::as.data.table(x)
# remove other data
dat[, names(dat)[!names(dat) %in% c(id_col, code_col)] := NULL]
View(dat)
# pivot longer if needed
if (length(code_col) > 1) {
dat <- data.table::melt(dat, id.vars = id_col, variable.name = "code_var", value.name = "code", na.rm = TRUE)
dat[, code_var := NULL]
}
View(dat)
include_codes <- lapply(include, function(x) get_codes(x))
if (is.null(names(include))) {
names(include_codes) <- include
}
# get the exclusion codes
if (!is.null(exclude)) {
exclude_codes <- lapply(exclude, function(x) get_codes(x))
if (is.null(names(exclude))) {
names(exclude_codes) <- exclude
}
} else {
exclude_codes <- list()
}
i=1
seq_along(include_codes)
include_codes[[i]]
names(include_codes)[i]
dat[include_codes[[i]], names(include_codes)[i] := TRUE, on = "code"]
View(dat)
i=2
include_codes[[i]]
names(include_codes)[i]
dat[include_codes[[i]], names(include_codes)[i] := TRUE, on = "code"]
View(dat)
dat[is.na(get(names(include_codes)[i])), names(include_codes)[i] := FALSE]
View(dat)
dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = id_col]
# parse the exclude codes
for (i in seq_along(exclude_codes)) {
dat[exclude_codes[[i]], names(exclude_codes)[i] := TRUE, on = "code"]
dat[is.na(get(names(exclude_codes)[i])), names(exclude_codes)[i] := FALSE]
}
dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = id_col]
dat[is.na(get(names(include_codes)[i])), names(include_codes)[i] := FALSE]
dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = id_col]
dat[is.na(get(names(include_codes)[i])), names(include_codes)[i] := FALSE]
View(dat)
i=1
dat[is.na(get(names(include_codes)[i])), names(include_codes)[i] := FALSE]
View(dat)
dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = id_col]
if (length(include_codes) > 1) {
count <- ifelse(include_multi == "any", 0, length(include_codes) - 1)
res[, include := rowSums(.SD) > count, .SDcols = names(include_codes)]
} else {
res[, include := get(names(include_codes))]
}
# summarise / compute the result
res <- dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = id_col]
# inclusions
if (length(include_codes) > 1) {
count <- ifelse(include_multi == "any", 0, length(include_codes) - 1)
res[, include := rowSums(.SD) > count, .SDcols = names(include_codes)]
} else {
res[, include := get(names(include_codes))]
}
View(res)
# exclusions
if (length(names(exclude_codes)) == 0) {
res[, exclude := FALSE]
} else if (length(names(exclude_codes)) == 1) {
res[, exclude := get(names(exclude_codes))]
} else {
count <- ifelse(exclude_multi == "any", 0, length(exclude_codes) - 1)
res[, exclude := rowSums(.SD) > count, .SDcols = names(exclude_codes)]
}
# final phenotype
res[, (name) := include & !exclude]
View(res)
load_all()
result <- phenotype(x        = dat,
id_col   = "ids",
code_col = c("codes", "codes1"),
name     = "Heart Failure",
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", mi = "PH1636"))
set.seed(2020)
n   <- 10
dat <- data.frame(ids   = paste0("ID_", c(1:(n/2), 1:(n/2))),
codes = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE),
codes1 = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE))
dat
result <- phenotype(x        = dat,
id_col   = "ids",
code_col = c("codes", "codes1"),
name     = "Heart Failure",
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", mi = "PH1636"))
result[]
check()
check()
document()
install()
pkgdown::build_site()
dat <- data.table::fread("/Users/xx20081/Library/CloudStorage/OneDrive-UniversityofBristol/NSTEMI_audit/ACS_raw_data.csv")
load_all()
names(dat)
dput(names(dat))
?phenotype
pheno <- phenotype(x        = dat,
id_col   = "ID",
code_col = c("Diagnosis Primary Code", paste0("Diagnosis", 1:25)),
name     = "Heart Failure",
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"))
View(pheno)
?gsub
gsub <- list(".", "", c("x"))
!is.null(gsub)
gsub[[3]] %in% c("x", "both")
gsub <- list(".", "", c("x", "PH4"))
gsub[[3]] %in% c("x", "both")
any(gsub[[3]] %in% c("x", "both")
any(gsub[[3]] %in% c("x", "both"))
gsub[[3]] %in% c("pheno", "both", names(include_codes)[i]))
gsub[[3]] %in% c("pheno", "both", names(include_codes)[i])
library(heRmes)
include  = list(HFsyn  = "PH1643", CM = "PH1646")
include_codes <- lapply(include, function(x) get_codes(x))
if (is.null(names(include))) {
names(include_codes) <- include
}
c("pheno", "both", include[i])
i=1
c("pheno", "both", include[i])
gsub[[3]] %in% c("pheno", "both", include[i])
gsub[[3]]
gsub[[3]] %in% c("pheno", "both", include[i])
gsub <- list(".", "", c("x", "PH1643"))
gsub[[3]] %in% c("pheno", "both", include[i])
load_all()
load_all()
dat <- data.table::fread("/Users/xx20081/Library/CloudStorage/OneDrive-UniversityofBristol/NSTEMI_audit/ACS_raw_data.csv")
pheno <- phenotype(x        = dat,
id_col   = "ID",
code_col = c("Diagnosis Primary Code", paste0("Diagnosis", 1:25)),
gsub     = c(".", "", "both"),
name     = "Heart Failure",
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"))
View(pheno)
x        = dat
id_col   = "ID"
code_col = c("Diagnosis Primary Code", paste0("Diagnosis", 1:25))
gsub     = c(".", "", "both")
name     = "Heart Failure"
include  = list(HFsyn  = "PH1643", CM = "PH1646")
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640")
# checks
include_multi <- match.arg(include_multi, choices = c("any", "all"))
include_multi = "any"
exclude_multi = "any"
include_multi <- match.arg(include_multi, choices = c("any", "all"))
exclude_multi <- match.arg(exclude_multi, choices = c("any", "all"))
if (!is.null(gsub)) {
gsub[[3]] <- match.arg(gsub[[3]], choices = c("x", "pheno", "both", include, exclude))
}
View(gsub)
dat <- data.table::as.data.table(x)
# remove other data
dat[, names(dat)[!names(dat) %in% c(id_col, code_col)] := NULL]
View(dat)
if (length(code_col) > 1) {
dat <- data.table::melt(dat, id.vars = id_col, variable.name = "code_var", value.name = "code", na.rm = TRUE)
dat[, code_var := NULL]
}
View(dat)
dat <- dat[code != "", ]
View(dat)
!is.null(gsub) && any(gsub[[3]] %in% c("x", "both"))
if (!is.null(gsub) && any(gsub[[3]] %in% c("x", "both"))) {
dat[, code := gsub(gsub[[1]], gsub[[2]], code, ...)]
}
dat[, code := gsub(gsub[[1]], gsub[[2]], code)]
View(dat)
gsub[[1]]
if (!is.null(gsub)) {
gsub[[3]] <- match.arg(gsub[[3]], choices = c("x", "pheno", "both", include, exclude))
if (gsub[[3]] == ".") warning("Match all regex `.` used, did you mean a literal period `\\.`?")
}
gsub[[3]]
c(".", "", "both")
gsub     = c(".", "", "both")
if (!is.null(gsub)) {
gsub[[3]] <- match.arg(gsub[[3]], choices = c("x", "pheno", "both", include, exclude))
if (gsub[[3]] == ".") warning("Match all regex `.` used, did you mean a literal period `\\.`?")
}
gsub[[3]] == "."
gsub     = c(".", "", "both")
if (!is.null(gsub)) {
gsub[[3]] <- match.arg(gsub[[3]], choices = c("x", "pheno", "both", include, exclude))
if (gsub[[1]] == ".") warning("Match all regex `.` used, did you mean a literal period `\\.`?")
}
load_all()
dat <- data.table::fread("/Users/xx20081/Library/CloudStorage/OneDrive-UniversityofBristol/NSTEMI_audit/ACS_raw_data.csv")
pheno <- phenotype(x        = dat,
id_col   = "ID",
code_col = c("Diagnosis Primary Code", paste0("Diagnosis", 1:25)),
gsub     = c("\\.", "", "both"),
name     = "Heart Failure",
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"))
View(pheno)
load_all()
load_all()
dat <- data.table::fread("/Users/xx20081/Library/CloudStorage/OneDrive-UniversityofBristol/NSTEMI_audit/ACS_raw_data.csv")
pheno <- phenotype(x        = dat,
id_col   = "ID",
code_col = c("Diagnosis Primary Code", paste0("Diagnosis", 1:25)),
gsub     = c(".", "", "both"),
name     = "Heart Failure",
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"))
load_all()
dat <- data.table::fread("/Users/xx20081/Library/CloudStorage/OneDrive-UniversityofBristol/NSTEMI_audit/ACS_raw_data.csv")
pheno <- phenotype(x        = dat,
id_col   = "ID",
code_col = c("Diagnosis Primary Code", paste0("Diagnosis", 1:25)),
gsub     = c(".", "", "both"),
name     = "Heart Failure",
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"))
View(pheno)
load_all()
dat <- data.table::fread("/Users/xx20081/Library/CloudStorage/OneDrive-UniversityofBristol/NSTEMI_audit/ACS_raw_data.csv")
pheno <- phenotype(x        = dat,
id_col   = "ID",
code_col = c("Diagnosis Primary Code", paste0("Diagnosis", 1:25)),
gsub     = c("\\.", "", "both"),
name     = "Heart Failure",
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"))
load_all()
dat <- data.table::fread("/Users/xx20081/Library/CloudStorage/OneDrive-UniversityofBristol/NSTEMI_audit/ACS_raw_data.csv")
pheno <- phenotype(x        = dat,
id_col   = "ID",
code_col = c("Diagnosis Primary Code", paste0("Diagnosis", 1:25)),
gsub     = c(".", "", "both"),
name     = "Heart Failure",
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"))
View(pheno)
load_all()
dat <- data.table::fread("/Users/xx20081/Library/CloudStorage/OneDrive-UniversityofBristol/NSTEMI_audit/ACS_raw_data.csv")
pheno <- phenotype(x        = dat,
id_col   = "ID",
code_col = c("Diagnosis Primary Code", paste0("Diagnosis", 1:25)),
gsub     = c("\\.", "", "PH1643"),
name     = "Heart Failure",
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"))
View(pheno)
View(include_codes)
include_codes[["HFsyn"]][["code"]]
which(include_codes[["HFsyn"]][["code"]] == "I509")
View(dat)
set.seed(2020)
n   <- 10
dat <- data.frame(ids   = paste0("ID_", c(1:(n/2), 1:(n/2))),
codes = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE),
codes1 = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE))
dat
dat[1, "codes1"] <- "I42.0"
document()
check()
install()
