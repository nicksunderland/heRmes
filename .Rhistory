hjust = 0)
load_all()
library(devtools)
load_all()
plot_code_overlap()
plot_code_overlap()
load_all()
plot_code_overlap()
plot(eulerr::euler(d, shape = "ellipse"), quantities = TRUE, size = 10)
plot(eulerr::euler(d, shape = "ellipse"), quantities = TRUE, size = 1)
plot(eulerr::euler(d, shape = "ellipse"), quantities = TRUE, cex=0.5)
plot(eulerr::euler(d, shape = "ellipse"), quantities = TRUE, cex.lab=0.5)
plot(eulerr::euler(d, shape = "ellipse"), quantities = TRUE, fontsize=0.5)
plot(eulerr::euler(d, shape = "ellipse"), quantities = TRUE, main=0.5)
plot(eulerr::euler(d, shape = "ellipse"), quantities = TRUE, labels=list(font = 4))
plot(eulerr::euler(d, shape = "ellipse"), quantities = TRUE, labels=list(font = 7))
plot(eulerr::euler(d, shape = "ellipse"), quantities = TRUE, labels=list(font = 1))
plot(eulerr::euler(d, shape = "ellipse"), quantities = TRUE, labels=list(font = 1), main="fds")
plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = list(size = 3),
main       = code_types[[i]])
plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = list(size = 1),
main       = code_types[[i]])
plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = list(size = 1),
main       = code_types[[i]],
legend = TRUE)
plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = code_types[[i]],
legend = TRUE)
View(codes)
codes[, group := paste0(meta$name, " (", meta$phenotype_id, ")")]
# list to take the plots
code_types <- unique(dat$coding_system.name)
plot_list <- list()
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) x[, code])
# plot
p <- plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = code_types[[i]],
legend = TRUE)
p
View(d)
View(d)
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
View(d)
dat <- lapply(pheno_ids, function(id) {
# get the meta data
meta <- get_metadata(id)
# get the codes
codes <- get_codes(id)[, c("code", "coding_system.name")]
codes[, group := paste0(meta$name, " (", meta$phenotype_id, ")")]
}) |> data.table::rbindlist()
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) x[, code])
# plot
p <- plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = code_types[[i]],
legend = TRUE)
p
plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
fills = TRUE,
main       = code_types[[i]],
legend = TRUE)
plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
fills = TRUE,
main       = code_types[[i]],
legend = TRUE)
plot(eulerr::euler(d, shape = "ellipse"),
quantities = list(type = "counts"),
labels     = FALSE,
main       = code_types[[i]],
legend = TRUE)
plot(eulerr::euler(d, shape = "ellipse"),
quantities = list(type = c("counts", "percent")),
labels     = FALSE,
main       = code_types[[i]],
legend = TRUE)
plot(eulerr::euler(d, shape = "ellipse"),
quantities = list(type = c("counts", "percent")),
labels     = FALSE,
adjust_labels = TRUE,
main       = code_types[[i]],
legend = TRUE)
# plot each type of code separately
for (i in seq_along(code_types)) {
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) x[, code])
# plot
p <- plot(eulerr::euler(d, shape = "ellipse"),
quantities = list(type = c("counts", "percent")),
labels     = FALSE,
main       = code_types[[i]],
legend     = TRUE)
plot_list[[ code_types[[i]] ]] <- p
}
# list to take the plots
code_types <- unique(dat$coding_system.name)
plot_list <- list()
# plot each type of code separately
for (i in seq_along(code_types)) {
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) x[, code])
# plot
p <- plot(eulerr::euler(d, shape = "ellipse"),
quantities = list(type = c("counts", "percent")),
labels     = FALSE,
main       = code_types[[i]],
legend     = TRUE)
plot_list[[ code_types[[i]] ]] <- p
}
ggpubr::ggarrange(plotlist = plot_list)
View(plot_list)
plot_list[[1]]
ggpubr::ggarrange(plotlist = plot_list, ncol = 3)
ggpubr::ggarrange(plotlist = plot_list, ncol = 3, nrow = 3)
ggpubr::ggarrange(plotlist = plot_list, ncol = 3, nrow = 3, common.legend = TRUE)
ggpubr::ggarrange(plotlist = plot_list, ncol = 3, nrow = 3,
common.legend = TRUE)
ggpubr::ggarrange(plotlist = plot_list, ncol = 4, nrow = 4,
common.legend = TRUE)
View(plot_list)
ggpubr::ggarrange(plotlist = plot_list, ncol = 2, nrow = 4)
ggpubr::ggarrange(plotlist = plot_list, ncol = 1, nrow = 6)
ggpubr::ggarrange(plotlist = plot_list, ncol = 1, nrow = 6, align = "v")
ggpubr::ggarrange(plotlist = plot_list, ncol = 1, nrow = 6, align = "hv")
# gather the data
dat <- lapply(pheno_ids, function(id) {
# get the meta data
meta <- get_metadata(id)
# get the codes
codes <- get_codes(id)[, c("code", "coding_system.name")]
codes[, group := paste0(meta$name, " (", meta$phenotype_id, ")")]
}) |> data.table::rbindlist()
# list to take the plots
code_types <- unique(dat$coding_system.name)
plot_list <- list()
# plot each type of code separately
for (i in seq_along(code_types)) {
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) x[, code])
# plot
p <- plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = code_types[[i]],
legend     = TRUE)
plot_list[[ code_types[[i]] ]] <- p
}
ggpubr::ggarrange(plotlist = plot_list, ncol = 1, nrow = 6, align = "hv")
load_all()
load_all()
plot_code_overlap()
plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = code_types[[i]], size = 1),
legend     = TRUE)
plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = code_types[[i]], size = 10),
legend     = TRUE)
plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = code_types[[i]], fontsize = 10),
legend     = TRUE)
plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = code_types[[i]], fontsize = 8),
legend     = TRUE)
load_all(0)
load_all()
plot_code_overlap()
plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = code_types[[i]], fontsize = 8, font = "bold"),
legend     = TRUE)
plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = TRUE)
load_all()
plot_code_overlap()
plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 5))
load_all()
plot_code_overlap()
load_all()
plot_code_overlap()
load_all()
plot_code_overlap()
load_all()
plot_code_overlap()
load_all()
get_phenotypes()
library(heRmes)
plot_code_overlap(pheno_ids = c("PH_DCM_HERMES_3.0", "PH1024", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993"))
plot_code_overlap(pheno_ids = c("PH_DCM_HERMES_3.0", "PH1024", "PH1028", "PH1055"))
pheno_ids = c("PH_DCM_HERMES_3.0", "PH1024", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993")
# gather the data
dat <- lapply(pheno_ids, function(id) {
# get the meta data
meta <- get_metadata(id)
# get the codes
codes <- get_codes(id)[, c("code", "coding_system.name")]
codes[, group := paste0(meta$name, " (", meta$phenotype_id, ")")]
}) |> data.table::rbindlist()
# list to take the plots
code_types <- unique(dat$coding_system.name)
plot_list <- list()
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) x[, code])
View(d)
i=2
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) x[, code])
View(d)
plot_code_overlap(pheno_ids = c("PH_DCM_HERMES_3.0", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993"))
stopifnot("pheno_ids must be length > 1" = length(pheno_ids) > 1)
# gather the data
dat <- lapply(pheno_ids, function(id) {
# get the meta data
meta <- get_metadata(id)
# get the codes
codes <- get_codes(id)[, c("code", "coding_system.name")]
codes[, group := paste0(meta$name, " (", meta$phenotype_id, ")")]
}) |> data.table::rbindlist()
# list to take the plots
code_types <- unique(dat$coding_system.name)
plot_list <- list()
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) x[, code])
View(d)
pheno_ids = c("PH_DCM_HERMES_3.0", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993")
stopifnot("pheno_ids must be length > 1" = length(pheno_ids) > 1)
# gather the data
dat <- lapply(pheno_ids, function(id) {
# get the meta data
meta <- get_metadata(id)
# get the codes
codes <- get_codes(id)[, c("code", "coding_system.name")]
codes[, group := paste0(meta$name, " (", meta$phenotype_id, ")")]
}) |> data.table::rbindlist()
# list to take the plots
code_types <- unique(dat$coding_system.name)
plot_list <- list()
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) x[, code])
View(d)
eulerr::euler(d, shape = "ellipse")
plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
i=3
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) x[, code])
# plot
p <- plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
View(d)
eulerr::euler(d, shape = "ellipse")
View(d)
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) unique(x[, code]))
# plot
p <- plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
p
View(d)
load_all()
plot_code_overlap(pheno_ids = c("PH_HF_HERMES_3.0", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993"))
pheno_ids = c("PH_HF_HERMES_3.0", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993")
stopifnot("pheno_ids must be length > 1" = length(pheno_ids) > 1)
# gather the data
dat <- lapply(pheno_ids, function(id) {
# get the meta data
meta <- get_metadata(id)
# get the codes
codes <- get_codes(id)[, c("code", "coding_system.name")]
codes[, group := paste0(meta$name, " (", meta$phenotype_id, ")")]
}) |> data.table::rbindlist()
# list to take the plots
code_types <- unique(dat$coding_system.name)
plot_list <- list()
# plot each type of code separately
for (i in seq_along(code_types)) {
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) unique(x[, code]))
# plot
p <- plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
plot_list[[ code_types[[i]] ]] <- p
}
ggpubr::ggarrange(plotlist = plot_list, ncol = 1)
ggpubr::ggarrange(plotlist = plot_list, ncol = 2)
ggpubr::ggarrange(plotlist = plot_list, ncol = 2, nrow = 4)
unique(code_types)
use_package("eulerr")
install()
dput(code_types)
load_all()
load_all()
plot_code_overlap(pheno_ids = c("PH_HF_HERMES_3.0", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993"),
types = c("ICD10 codes", "ICD9 codes", "OPCS4 codes", "Read codes v2", "SNOMED  CT codes"))
?ceiling
load_all()
plot_code_overlap(pheno_ids = c("PH_HF_HERMES_3.0", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993"),
types = c("ICD10 codes", "ICD9 codes", "OPCS4 codes", "Read codes v2", "SNOMED  CT codes"))
document()
check()
install()
install()
plot_code_overlap(pheno_ids = c("PH_HF_HERMES_3.0", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993"),
types = c("ICD10 codes", "ICD9 codes", "OPCS4 codes", "Read codes v2", "SNOMED  CT codes"))
library(heRmes)
library(heRmes)
library(heRmes)
library(heRmes)
pkgdown::build_site()
search_terms = c("heart failure")
client <- ConceptLibraryClient::Connection$new(public = TRUE)
search_results <- lapply(search_terms, function(x) client$phenotypes$get(search = x)[, c("name", "phenotype_id")]) |>
data.table::rbindlist()
View(search_results)
codes <- client$phenotypes$get_codelist('PH1635')
codes <- client$phenotypes$get_codelist('PH1635', version_id=3269)
# connect to API
client <- ConceptLibraryClient::Connection$new(public = FALSE)
# connect to API
client <- ConceptLibraryClient::Connection$new(public = FALSE)
?ConceptLibraryClient::Connection$new
?ConceptLibraryClient::Connection
client <- ConceptLibraryClient::Connection$new(username = "nsunderland",
password = "24April2024",
public   = FALSE)
client <- ConceptLibraryClient::Connection$new(username = "nsunderland",
password = "24April2024",
public   = FALSE)
codes <- client$phenotypes$get_codelist("PH1639")
View(codes)
is.null(c(NULL, NULL))
is.null(c(NULL, 1))
load_all()
UKHDR_UN
Sys.getenv("UKHDR_UN")
Sys.getenv("f")
UKHDR_UN = Sys.getenv("UKHDR_UN")
UKHDR_PW = Sys.getenv("UKHDR_PW")
public_flag <- ifelse(is.null(UKHDR_UN) | is.null(UKHDR_PW), FALSE, TRUE)
client <- ConceptLibraryClient::Connection$new(username = UKHDR_UN,
password = UKHDR_PW,
public   = public_flag)
search_terms = c("heart failure", "cardiomyopathy", "myocardial infarction")
search_results <- lapply(search_terms, function(x) client$phenotypes$get(search = x)[, c("name", "phenotype_id")]) |>
data.table::rbindlist()
View(search_results)
search_terms = c()
search_results <- lapply(search_terms, function(x) client$phenotypes$get(search = x)[, c("name", "phenotype_id")]) |>
data.table::rbindlist()
pheno_ids <- search_results[grepl(paste0(search_terms, collapse = "|"), name, ignore.case = TRUE), phenotype_id]
length(search_results)
pheno_ids <- c()
if (length(search_results) > 0) {
pheno_ids <- search_results[grepl(paste0(search_terms, collapse = "|"), name, ignore.case = TRUE), phenotype_id]
}
pheno_ids <- c(pheno_ids, ids)
load_all()
library(heRmes)
# ids named for readability only
update_library(ids = c(`Congenital heart disease`    = "PH1637",
`Myocardial infarction`       = "PH1636",
`Secondary cardiomyopathies`  = "PH1642",
`Hypertrophic cardiomyopathy` = "PH1640",
`Dilated cardiomyopathy`      = "PH1638",
`Cardiomyopathy`              = "PH1646",
`Heart failure`               = "PH1645",
`Non-ischaemic cardiomyopathy`= "PH1639",
`Heart failure syndrome`      = "PH1643"),
UKHDR_UN = Sys.getenv("UKHDR_UN"),
UKHDR_PW = Sys.getenv("UKHDR_PW"))
pheno_ids=c("PH1637")
i=1
cat("[i] reading phenotype id:", id)
id <- pheno_ids[[i]]
cat("[i] reading phenotype id:", id)
pheno_file <- file.path(system.file("extdata", "ukhdr_phenotypes", package = "heRmes"), paste0(id, ".yaml"))
!file.exists(pheno_file)
cat(" - downloading")
client$phenotypes$save_definition_file(pheno_file, id)
?client$phenotypes$save_definition_file
client$phenotypes$get_versions(id)
codes <- client$phenotypes$get_codelist(id) |> data.table::as.data.table()
client$phenotypes$get_codelist(id) |> data.table::as.data.table()
public_flag <- ifelse(is.null(UKHDR_UN) | is.null(UKHDR_PW), FALSE, TRUE)
client <- ConceptLibraryClient::Connection$new(username = UKHDR_UN,
password = UKHDR_PW,
public   = public_flag)
client$phenotypes$get_versions(id)
client$phenotypes$save_definition_file(pheno_file, id)
id = "PH1639"
client$phenotypes$get_versions(id)
client$phenotypes$save_definition_file(pheno_file, id)
client$phenotypes$save_definition_file(pheno_file, id, version_id = 3370)
client <- ConceptLibraryClient::Connection$new(username = UKHDR_UN,
password = UKHDR_PW,
public   = public_flag)
client$phenotypes$save_definition_file(pheno_file, id, version_id = 3370)
client
# connect to API
public_flag <- ifelse(is.null(UKHDR_UN) | is.null(UKHDR_PW), TRUE, FALSE)
client <- ConceptLibraryClient::Connection$new(username = UKHDR_UN,
password = UKHDR_PW,
public   = public_flag)
client$phenotypes$get_versions(id)
client$phenotypes$save_definition_file(pheno_file, id)
codes <- client$phenotypes$get_codelist(id) |> data.table::as.data.table()
load_all()
# ids named for readability only
update_library(ids = c(`Congenital heart disease`    = "PH1637",
`Myocardial infarction`       = "PH1636",
`Secondary cardiomyopathies`  = "PH1642",
`Hypertrophic cardiomyopathy` = "PH1640",
`Dilated cardiomyopathy`      = "PH1638",
`Cardiomyopathy`              = "PH1646",
`Heart failure`               = "PH1645",
`Non-ischaemic cardiomyopathy`= "PH1639",
`Heart failure syndrome`      = "PH1643"),
UKHDR_UN = Sys.getenv("UKHDR_UN"),
UKHDR_PW = Sys.getenv("UKHDR_PW"))
# ids named for readability only
update_library(ids = c(`Congenital heart disease`    = "PH1637",
`Myocardial infarction`       = "PH1636",
`Secondary cardiomyopathies`  = "PH1642",
`Hypertrophic cardiomyopathy` = "PH1640",
`Dilated cardiomyopathy`      = "PH1638",
`Cardiomyopathy`              = "PH1646",
`Heart failure`               = "PH1645",
`Non-ischaemic cardiomyopathy`= "PH1639",
`Heart failure syndrome`      = "PH1643"),
UKHDR_UN = Sys.getenv("UKHDR_UN"),
UKHDR_PW = Sys.getenv("UKHDR_PW"))
# development phenotypes, ids named for readability only
hermes_phenos <- c(`Congenital heart disease`    = "PH1637",
`Myocardial infarction`       = "PH1636",
`Secondary cardiomyopathies`  = "PH1642",
`Hypertrophic cardiomyopathy` = "PH1640",
`Dilated cardiomyopathy`      = "PH1638",
`Cardiomyopathy`              = "PH1646",
`Heart failure`               = "PH1645",
`Non-ischaemic cardiomyopathy`= "PH1639",
`Heart failure syndrome`      = "PH1643")
plot_code_overlap(pheno_ids = hermes_phenos, types = c("ICD10 codes"))
check()
install()
p <- plot_code_overlap(pheno_ids = hermes_phenos, types = c("ICD10 codes"))
p
load_all()
p <- plot_code_overlap(pheno_ids = hermes_phenos, types = c("ICD10 codes"))
p
install()
?eulerr::euler
load_all()
load_all()\
load_all()\
load_all()
load_all()
