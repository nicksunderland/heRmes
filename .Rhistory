include_multi = "any"
exclude_multi = "any"
include_multi <- match.arg(include_multi, choices = c("any", "all"))
exclude_multi <- match.arg(exclude_multi, choices = c("any", "all"))
if (!is.null(gsub)) {
gsub[[3]] <- match.arg(gsub[[3]], choices = c("x", "pheno", "both", include, exclude))
if (gsub[[1]] == ".") warning("Match all regex `.` used, did you want to match a literal period? If so, use `\\\\.`")
}
gsub     = c("\\.", "", "x")
# checks
include_multi <- match.arg(include_multi, choices = c("any", "all"))
exclude_multi <- match.arg(exclude_multi, choices = c("any", "all"))
if (!is.null(gsub)) {
gsub[[3]] <- match.arg(gsub[[3]], choices = c("x", "pheno", "both", include, exclude))
if (gsub[[1]] == ".") warning("Match all regex `.` used, did you want to match a literal period? If so, use `\\\\.`")
}
dat <- data.table::as.data.table(x)
View(dat)
dat[, names(dat)[!names(dat) %in% c(id_col, code_col)] := NULL]
if (length(code_col) > 1) {
dat <- data.table::melt(dat, id.vars = id_col, variable.name = "code_var", value.name = "code", na.rm = TRUE)
dat[, code_var := NULL]
dat <- dat[code != "", ]
}
View(dat)
pkgdown::build_site()
check()
document()
library(usethis)
library(devtools)
document()
check()
load_all()
?phenotype
get_phenotypes()
install()
get_phenotypes()
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
pheno <- phenotype(diag_path,
id_col   = "eid",
code_col = c("diag_icd9", "diag_icd10"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
pheno <- phenotype(diag_path,
id_col   = "eid",
code_col = c("diag_icd9", "diag_icd10"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
pheno <- phenotype(diag_path,
id_col   = "eid",
code_col = c("diag_icd9", "diag_icd10"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
View(pheno)
p <- plot(eulerr::euler(pheno, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
# main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
p
d[-1]
pheno[-1]
pheno[,-1]
p <- plot(eulerr::euler(pheno[,-1], shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
# main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
p
?eulerr::euler
p <- plot(eulerr::euler(pheno[,-1], shape = "circle"),
quantities = TRUE,
labels     = FALSE,
# main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
p
sum(pheno$congHD)
conghd <- get_codes("PH1637")
View(conghd)
diag <- data.table::fread(diag_path)
diag[conghd, conghd := TRUE, on = c("diag_icd10" = "code")]
View(diag)
diag[conghd, c("conghd_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
View(diag)
sum(diag$conghd_icd == TRUE)
sum(diag$conghd_icd == TRUE, na.rm = T)
sum(diag$conghd_icd, na.rm = T)
sum(diag$conghd, na.rm = T)
View(pheno)
sum(pheno$congHD)
foo = diag[, any(!is.na(conghd_icd)), by = "eid"]
View(foo)
sum(foo$V1) / nrow(foo)
foo = diag[, any(!is.na(conghd_icd)), by = c("eid", "desc")]
View(foo)
foo[, .N, by = "desc"]
foo[, .N, by = "desc"][order(N),]
foo[, .N, by = "desc"][order(-N),]
View(diag)
View(conghd)
code_cols = list(icd9   = NULL,
icd10  = NULL,
opcs   = NULL,
readv2 = NULL,
readv3 = NULL)
sapply(code_cols, is.null)
all(sapply(code_cols, is.null))
names(code_cols) %in% c("icd9", "icd10", "opcs", "readv2", "readv3")
!names(code_cols) %in% c("icd9", "icd10", "opcs", "readv2", "readv3"))
!names(code_cols) %in% c("icd9", "icd10", "opcs", "readv2", "readv3")
any(!names(code_cols) %in% c("icd9", "icd10", "opcs", "readv2", "readv3"))
all(names(code_cols) %in% c("icd9", "icd10", "opcs", "readv2", "readv3"))
x = diag[1:10, ]
View(x)
code_cols = list(icd10 = "diag_icd10", icd9 = "diag_icd9")
verbose = TRUE
if (verbose) cat("Phenotyping...\n")
dat <- data.table::as.data.table(x)
stopifnot("`code_cols` must contain at least 1 non-NULL value" = !all(sapply(code_cols, is.null)))
stopifnot("Invalid `code_cols` list item detected" = all(names(code_cols) %in% c("icd9", "icd10", "opcs", "readv2", "readv3")))
dat2 <- data.table::melt(dat, id.vars = id_col, variable.name = "code_var", value.name = "code", na.rm = TRUE)
id_col   = "eid"
dat2 <- data.table::melt(dat, id.vars = id_col, variable.name = "code_var", value.name = "code", na.rm = TRUE)
View(dat2)
View(dat)
?data.table::melt
unlist(code_cols)
code_cols = list(icd10 = c("diag_icd10", "foo"), icd9 = "diag_icd9")
unlist(code_cols)
code_cols = list(icd10 = "diag_icd10", icd9 = "diag_icd9")
dat2 <- data.table::melt(dat,
id.vars = id_col,
measure.vars = unlist(code_cols),
variable.name = "code_var", value.name = "code", na.rm = TRUE)
View(dat2)
dat2 <- data.table::melt(dat,
id.vars = id_col,
measure.vars = unlist(code_cols),
variable.name = "code_type",
value.name = "code",
na.rm = TRUE)
dat <- data.table::melt(dat,
id.vars = id_col,
measure.vars = unlist(code_cols),
variable.name = "code_type",
value.name = "code",
na.rm = TRUE)
dat <- dat[code != "", ]
View(dat)
code_types <- data.table::data.table(code_cols)
code_types
code_cols
code_cols = list(icd10 = c("diag_icd10", "foo)", icd9 = "diag_icd9")
)
data.table::data.table(code_cols)
code_cols = list(icd10 = c("diag_icd10", "foo"), icd9 = "diag_icd9")
data.table::data.table(code_cols)
code_cols
data.table::rbindlist(
lapply(names(code_cols), function(x) {
data.frame(code_type = x, col_name = code_cols[[x]])
})
)
code_types <- data.table::rbindlist(
lapply(names(code_cols), function(x) {
data.frame(code_type = x, col_name = code_cols[[x]])
})
)
dat=x
dat <- data.table::melt(dat,
id.vars = id_col,
measure.vars = unlist(code_cols),
variable.name = "col_name",
value.name = "code",
na.rm = TRUE)
View(dat)
dat
unlist(code_cols)
code_cols = list(icd10 = c("diag_icd10"), icd9 = "diag_icd9")
code_types <- data.table::rbindlist(
lapply(names(code_cols), function(x) {
data.frame(code_type = x, col_name = code_cols[[x]])
})
)
dat <- data.table::melt(dat,
id.vars = id_col,
measure.vars = unlist(code_cols),
variable.name = "col_name",
value.name = "code",
na.rm = TRUE)
View(dat)
dat <- dat[code != "", ]
View(dat)
dat[code_types, code_type := i.code_type, on = "col_name"]
View(dat)
dat[, col_name := NULL]
View(dat)
include  = list(HFsyn  = "PH1643", CM = "PH1646")
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640")
gsub     = list("\\.", "", c("x"))
name     = "Heart Failure"
# gsub codes if needed
if (!is.null(gsub) && any(gsub[[3]] %in% c("x", "both"))) {
if (verbose) cat("[i] cleaning input codes with regex [", gsub[[1]], "], replacement [", gsub[[2]], "]\n")
dat[, code := gsub(gsub[[1]], gsub[[2]], code, ...)]
}
if (verbose) cat("[i] getting inclusion phenotype codes from PhenoID(s)", paste0(include, collapse = ", "), "\n")
include_codes <- lapply(include, function(x) get_codes(x))
if (is.null(names(include))) {
names(include_codes) <- include
}
if (!is.null(exclude)) {
if (verbose) cat("[i] getting exclusion phenotype codes from PhenoID(s)", paste0(exclude, collapse = ", "), "\n")
exclude_codes <- lapply(exclude, function(x) get_codes(x))
if (is.null(names(exclude))) {
names(exclude_codes) <- exclude
}
} else {
exclude_codes <- list()
}
i=1
if (verbose) cat("[i] assessing phenotype", include[[i]], "\n")
!is.null(gsub) && any(gsub[[3]] %in% c("pheno", "both", include[[i]]))
unique(conghd$coding_system.name)
code_cols = list("ICD10 codes" = c("diag_icd10"), "ICD9 codes" = "diag_icd9")
dat=x
code_types <- data.table::rbindlist(
lapply(names(code_cols), function(x) {
data.frame(code_type = x, col_name = code_cols[[x]])
})
)
code_types
dat <- data.table::melt(dat,
id.vars       = id_col,
measure.vars  = unlist(code_cols),
variable.name = "col_name",
value.name    = "code",
na.rm         = TRUE)
dat <- dat[code != "", ]
dat[code_types, code_type := i.code_type, on = "col_name"]
dat[, col_name := NULL]
View(dat)
include_codes[[i]]
dat
dat[include_codes[[i]], names(include_codes)[i] := TRUE, on = c("code" = "code", "code_type" = "coding_system.name")]
View(dat)
dat[is.na(get(names(include_codes)[i])), names(include_codes)[i] := FALSE]
View(dat)
dat[exclude_codes[[i]], names(exclude_codes)[i] := TRUE, on = c("code" = "code", "code_type" = "coding_system.name")]
dat[is.na(get(names(exclude_codes)[i])), names(exclude_codes)[i] := FALSE]
View(dat)
res <- dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = id_col]
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
# conghd <- get_codes("PH1637")
# diag <- data.table::fread(diag_path)
# diag[conghd, c("conghd_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
#
# foo = diag[, any(!is.na(conghd_icd)), by = c("eid", "desc")]
pheno <- phenotype(diag_path,
id_col   = "eid",
code_cols = list(icd10 = "diag_icd10", icd9 = "diag_icd9"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
unlist(code_cols)
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
# conghd <- get_codes("PH1637")
# diag <- data.table::fread(diag_path)
# diag[conghd, c("conghd_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
#
# foo = diag[, any(!is.na(conghd_icd)), by = c("eid", "desc")]
pheno <- phenotype(diag_path,
id_col   = "eid",
code_cols = list(icd10 = "diag_icd10", icd9 = "diag_icd9"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
# conghd <- get_codes("PH1637")
# diag <- data.table::fread(diag_path)
# diag[conghd, c("conghd_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
#
# foo = diag[, any(!is.na(conghd_icd)), by = c("eid", "desc")]
pheno <- phenotype(diag_path,
id_col   = "eid",
code_cols = list(icd10 = "diag_icd10", icd9 = "diag_icd9"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
# conghd <- get_codes("PH1637")
# diag <- data.table::fread(diag_path)
# diag[conghd, c("conghd_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
#
# foo = diag[, any(!is.na(conghd_icd)), by = c("eid", "desc")]
pheno <- phenotype(diag_path,
id_col   = "eid",
code_cols = list("ICD10 codes" = "diag_icd10", "ICD9 codes" = "diag_icd9"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
# conghd <- get_codes("PH1637")
# diag <- data.table::fread(diag_path)
# diag[conghd, c("conghd_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
#
# foo = diag[, any(!is.na(conghd_icd)), by = c("eid", "desc")]
pheno <- phenotype(diag_path,
id_col   = "eid",
code_cols = list("ICD10 codes" = "diag_icd10", "ICD9 codes" = "diag_icd9"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
View(pheno)
p <- plot(eulerr::euler(pheno[,-1], shape = "circle"),
quantities = TRUE,
labels     = FALSE,
# main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
p
library(ggplot2)
pheno[,-1][, lapply(.SD, sum)]
mi <- get_codes("PH1636")
View(mi)
mi <- get_codes("PH1636")
diag <- data.table::fread(diag_path)
diag[mi, c("mi_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
View(diag)
View(mi)
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
diag <- data.table::fread(diag_path)
x = diag[1:10, ]
id_col   = "eid"
code_cols = list("ICD10 codes" = "diag_icd10", "ICD9 codes" = "diag_icd9")
include  = list(HFsyn  = "PH1643", CM = "PH1646")
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640")
gsub     = list("\\.", "", c("x"))
name     = "Heart Failure"
include_multi = "any"
verbose = TRUE
dat = x
code_types <- data.table::rbindlist(
lapply(names(code_cols), function(x) {
data.frame(code_type = x, col_name = code_cols[[x]])
})
)
dat <- data.table::melt(dat,
id.vars       = id_col,
measure.vars  = unlist(code_cols),
variable.name = "col_name",
value.name    = "code",
na.rm         = TRUE)
dat <- dat[code != "", ]
dat[code_types, code_type := i.code_type, on = "col_name"]
dat[, col_name := NULL]
View(dat)
dat = diag
code_types <- data.table::rbindlist(
lapply(names(code_cols), function(x) {
data.frame(code_type = x, col_name = code_cols[[x]])
})
)
dat <- data.table::melt(dat,
id.vars       = id_col,
measure.vars  = unlist(code_cols),
variable.name = "col_name",
value.name    = "code",
na.rm         = TRUE)
dat <- dat[code != "", ]
dat[code_types, code_type := i.code_type, on = "col_name"]
dat[, col_name := NULL]
View(dat)
# get the inclusion codes
if (verbose) cat("[i] getting inclusion phenotype codes from PhenoID(s)", paste0(include, collapse = ", "), "\n")
include_codes <- lapply(include, function(x) get_codes(x))
if (is.null(names(include))) {
names(include_codes) <- include
}
# get the exclusion codes
if (!is.null(exclude)) {
if (verbose) cat("[i] getting exclusion phenotype codes from PhenoID(s)", paste0(exclude, collapse = ", "), "\n")
exclude_codes <- lapply(exclude, function(x) get_codes(x))
if (is.null(names(exclude))) {
names(exclude_codes) <- exclude
}
} else {
exclude_codes <- list()
}
View(include_codes)
mi = exclude_codes$MI
View(mi)
gsub=NULL
for (i in seq_along(include_codes)) {
if (verbose) cat("[i] assessing phenotype", include[[i]], "\n")
# gsub codes if needed
if (!is.null(gsub) && any(gsub[[3]] %in% c("pheno", "both", include[[i]]))) {
if (verbose) cat("[i] cleaning phenotype codes with regex [", gsub[[1]], "], replacement [", gsub[[2]], "]\n")
include_codes[[i]][, code := gsub(gsub[[1]], gsub[[2]], code, ...)]
include_codes[[i]] <- include_codes[[i]][code != "", ]
}
dat[include_codes[[i]], names(include_codes)[i] := TRUE, on = c("code" = "code", "code_type" = "coding_system.name")]
dat[is.na(get(names(include_codes)[i])), names(include_codes)[i] := FALSE]
}
# parse the exclude codes
for (i in seq_along(exclude_codes)) {
if (verbose) cat("[i] assessing phenotype", exclude[[i]], "\n")
# gsub codes if needed
if (!is.null(exclude) && !is.null(gsub) && any(gsub[[3]] %in% c("pheno", "both", exclude[[i]]))) {
if (verbose) cat("[i] cleaning phenotype codes with regex [", gsub[[1]], "], replacement [", gsub[[2]], "]\n")
exclude_codes[[i]][, code := gsub(gsub[[1]], gsub[[2]], code, ...)]
exclude_codes[[i]] <- exclude_codes[[i]][code != "", ]
}
dat[exclude_codes[[i]], names(exclude_codes)[i] := TRUE, on = c("code" = "code", "code_type" = "coding_system.name")]
dat[is.na(get(names(exclude_codes)[i])), names(exclude_codes)[i] := FALSE]
}
View(dat)
if (verbose) cat("[i] summarising phenotyping of participants\n")
res <- dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = id_col]
View(res)
sum(res$MI)
res[, none := rowSums(.SD)==0, .SDcols = names(res)[-1]]
load_all()
diag_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
proc_path <- "/Users/xx20081/Desktop/hesin_oper.txt"
# mi <- get_codes("PH1636")
# diag <- data.table::fread(diag_path)
# diag[mi, c("mi_icd", "desc") := .(i.code, i.description), on = c("diag_icd10" = "code")]
# #
# foo = diag[, any(!is.na(conghd_icd)), by = c("eid", "desc")]
pheno <- phenotype(diag_path,
id_col   = "eid",
code_cols = list("ICD10 codes" = "diag_icd10", "ICD9 codes" = "diag_icd9"),
include  = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude  = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub     = list("\\.", "", c("x")),
name     = "Heart Failure")
View(pheno)
p <- plot(eulerr::euler(pheno[,-1], shape = "circle"),
quantities = TRUE,
labels     = FALSE,
# main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
p
pheno[,names(pheno)[names(pheno) %in% c("eid", "none")]
]
pheno[, mget(names(pheno)[names(pheno) %in% c("eid", "none")])]
p <- plot(eulerr::euler(pheno[, mget(names(pheno)[!names(pheno) %in% c("eid", "none")])], shape = "circle"),
quantities = TRUE,
labels     = FALSE,
# main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
p
library(heRmes)
file_path <- "/Users/xx20081/Desktop/hesin_diag.txt"
pheno_ukbb <- phenotype(file_path,
id_col    = "eid",
code_cols = list("ICD10 codes" = "diag_icd10", "ICD9 codes" = "diag_icd9"),
include   = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude   = list(congHD = "PH1637", MI = "PH1636", HCM = "PH1640"),
gsub      = list("\\.", "", c("x")),
name      = "Heart Failure")
plot(eulerr::euler(pheno_ukbb[, mget(names(pheno)[!names(pheno) %in% c("eid", "none")])], shape = "circle"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = "UKBB Heart failure phenotyping", fontsize = 8, font = 2),
legend     = list(fontsize = 8))
plot(eulerr::euler(pheno_ukbb[, mget(names(pheno_ukbb)[!names(pheno_ukbb) %in% c("eid", "none")])], shape = "circle"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = "UKBB Heart failure phenotyping", fontsize = 8, font = 2),
legend     = list(fontsize = 8))
document()
check()
check()
document()
document()
document()
document()
check()
install()
install()
