labels     = FALSE,
main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
i=3
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) x[, code])
# plot
p <- plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
View(d)
eulerr::euler(d, shape = "ellipse")
View(d)
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) unique(x[, code]))
# plot
p <- plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
p
View(d)
load_all()
plot_code_overlap(pheno_ids = c("PH_HF_HERMES_3.0", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993"))
pheno_ids = c("PH_HF_HERMES_3.0", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993")
stopifnot("pheno_ids must be length > 1" = length(pheno_ids) > 1)
# gather the data
dat <- lapply(pheno_ids, function(id) {
# get the meta data
meta <- get_metadata(id)
# get the codes
codes <- get_codes(id)[, c("code", "coding_system.name")]
codes[, group := paste0(meta$name, " (", meta$phenotype_id, ")")]
}) |> data.table::rbindlist()
# list to take the plots
code_types <- unique(dat$coding_system.name)
plot_list <- list()
# plot each type of code separately
for (i in seq_along(code_types)) {
d <- dat[coding_system.name == code_types[[i]], ]
d <- split(d, by = "group")
d <- lapply(d, function(x) unique(x[, code]))
# plot
p <- plot(eulerr::euler(d, shape = "ellipse"),
quantities = TRUE,
labels     = FALSE,
main       = list(label = code_types[[i]], fontsize = 8, font = 2),
legend     = list(fontsize = 8))
plot_list[[ code_types[[i]] ]] <- p
}
ggpubr::ggarrange(plotlist = plot_list, ncol = 1)
ggpubr::ggarrange(plotlist = plot_list, ncol = 2)
ggpubr::ggarrange(plotlist = plot_list, ncol = 2, nrow = 4)
unique(code_types)
use_package("eulerr")
install()
dput(code_types)
load_all()
load_all()
plot_code_overlap(pheno_ids = c("PH_HF_HERMES_3.0", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993"),
types = c("ICD10 codes", "ICD9 codes", "OPCS4 codes", "Read codes v2", "SNOMED  CT codes"))
?ceiling
load_all()
plot_code_overlap(pheno_ids = c("PH_HF_HERMES_3.0", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993"),
types = c("ICD10 codes", "ICD9 codes", "OPCS4 codes", "Read codes v2", "SNOMED  CT codes"))
document()
check()
install()
install()
plot_code_overlap(pheno_ids = c("PH_HF_HERMES_3.0", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993"),
types = c("ICD10 codes", "ICD9 codes", "OPCS4 codes", "Read codes v2", "SNOMED  CT codes"))
library(heRmes)
library(heRmes)
library(heRmes)
library(heRmes)
pkgdown::build_site()
search_terms = c("heart failure")
client <- ConceptLibraryClient::Connection$new(public = TRUE)
search_results <- lapply(search_terms, function(x) client$phenotypes$get(search = x)[, c("name", "phenotype_id")]) |>
data.table::rbindlist()
View(search_results)
codes <- client$phenotypes$get_codelist('PH1635')
codes <- client$phenotypes$get_codelist('PH1635', version_id=3269)
# connect to API
client <- ConceptLibraryClient::Connection$new(public = FALSE)
# connect to API
client <- ConceptLibraryClient::Connection$new(public = FALSE)
?ConceptLibraryClient::Connection$new
?ConceptLibraryClient::Connection
client <- ConceptLibraryClient::Connection$new(username = "nsunderland",
password = "24April2024",
public   = FALSE)
client <- ConceptLibraryClient::Connection$new(username = "nsunderland",
password = "24April2024",
public   = FALSE)
codes <- client$phenotypes$get_codelist("PH1639")
View(codes)
is.null(c(NULL, NULL))
is.null(c(NULL, 1))
load_all()
UKHDR_UN
Sys.getenv("UKHDR_UN")
Sys.getenv("f")
UKHDR_UN = Sys.getenv("UKHDR_UN")
UKHDR_PW = Sys.getenv("UKHDR_PW")
public_flag <- ifelse(is.null(UKHDR_UN) | is.null(UKHDR_PW), FALSE, TRUE)
client <- ConceptLibraryClient::Connection$new(username = UKHDR_UN,
password = UKHDR_PW,
public   = public_flag)
search_terms = c("heart failure", "cardiomyopathy", "myocardial infarction")
search_results <- lapply(search_terms, function(x) client$phenotypes$get(search = x)[, c("name", "phenotype_id")]) |>
data.table::rbindlist()
View(search_results)
search_terms = c()
search_results <- lapply(search_terms, function(x) client$phenotypes$get(search = x)[, c("name", "phenotype_id")]) |>
data.table::rbindlist()
pheno_ids <- search_results[grepl(paste0(search_terms, collapse = "|"), name, ignore.case = TRUE), phenotype_id]
length(search_results)
pheno_ids <- c()
if (length(search_results) > 0) {
pheno_ids <- search_results[grepl(paste0(search_terms, collapse = "|"), name, ignore.case = TRUE), phenotype_id]
}
pheno_ids <- c(pheno_ids, ids)
load_all()
library(heRmes)
# ids named for readability only
update_library(ids = c(`Congenital heart disease`    = "PH1637",
`Myocardial infarction`       = "PH1636",
`Secondary cardiomyopathies`  = "PH1642",
`Hypertrophic cardiomyopathy` = "PH1640",
`Dilated cardiomyopathy`      = "PH1638",
`Cardiomyopathy`              = "PH1646",
`Heart failure`               = "PH1645",
`Non-ischaemic cardiomyopathy`= "PH1639",
`Heart failure syndrome`      = "PH1643"),
UKHDR_UN = Sys.getenv("UKHDR_UN"),
UKHDR_PW = Sys.getenv("UKHDR_PW"))
pheno_ids=c("PH1637")
i=1
cat("[i] reading phenotype id:", id)
id <- pheno_ids[[i]]
cat("[i] reading phenotype id:", id)
pheno_file <- file.path(system.file("extdata", "ukhdr_phenotypes", package = "heRmes"), paste0(id, ".yaml"))
!file.exists(pheno_file)
cat(" - downloading")
client$phenotypes$save_definition_file(pheno_file, id)
?client$phenotypes$save_definition_file
client$phenotypes$get_versions(id)
codes <- client$phenotypes$get_codelist(id) |> data.table::as.data.table()
client$phenotypes$get_codelist(id) |> data.table::as.data.table()
public_flag <- ifelse(is.null(UKHDR_UN) | is.null(UKHDR_PW), FALSE, TRUE)
client <- ConceptLibraryClient::Connection$new(username = UKHDR_UN,
password = UKHDR_PW,
public   = public_flag)
client$phenotypes$get_versions(id)
client$phenotypes$save_definition_file(pheno_file, id)
id = "PH1639"
client$phenotypes$get_versions(id)
client$phenotypes$save_definition_file(pheno_file, id)
client$phenotypes$save_definition_file(pheno_file, id, version_id = 3370)
client <- ConceptLibraryClient::Connection$new(username = UKHDR_UN,
password = UKHDR_PW,
public   = public_flag)
client$phenotypes$save_definition_file(pheno_file, id, version_id = 3370)
client
# connect to API
public_flag <- ifelse(is.null(UKHDR_UN) | is.null(UKHDR_PW), TRUE, FALSE)
client <- ConceptLibraryClient::Connection$new(username = UKHDR_UN,
password = UKHDR_PW,
public   = public_flag)
client$phenotypes$get_versions(id)
client$phenotypes$save_definition_file(pheno_file, id)
codes <- client$phenotypes$get_codelist(id) |> data.table::as.data.table()
load_all()
# ids named for readability only
update_library(ids = c(`Congenital heart disease`    = "PH1637",
`Myocardial infarction`       = "PH1636",
`Secondary cardiomyopathies`  = "PH1642",
`Hypertrophic cardiomyopathy` = "PH1640",
`Dilated cardiomyopathy`      = "PH1638",
`Cardiomyopathy`              = "PH1646",
`Heart failure`               = "PH1645",
`Non-ischaemic cardiomyopathy`= "PH1639",
`Heart failure syndrome`      = "PH1643"),
UKHDR_UN = Sys.getenv("UKHDR_UN"),
UKHDR_PW = Sys.getenv("UKHDR_PW"))
# ids named for readability only
update_library(ids = c(`Congenital heart disease`    = "PH1637",
`Myocardial infarction`       = "PH1636",
`Secondary cardiomyopathies`  = "PH1642",
`Hypertrophic cardiomyopathy` = "PH1640",
`Dilated cardiomyopathy`      = "PH1638",
`Cardiomyopathy`              = "PH1646",
`Heart failure`               = "PH1645",
`Non-ischaemic cardiomyopathy`= "PH1639",
`Heart failure syndrome`      = "PH1643"),
UKHDR_UN = Sys.getenv("UKHDR_UN"),
UKHDR_PW = Sys.getenv("UKHDR_PW"))
# development phenotypes, ids named for readability only
hermes_phenos <- c(`Congenital heart disease`    = "PH1637",
`Myocardial infarction`       = "PH1636",
`Secondary cardiomyopathies`  = "PH1642",
`Hypertrophic cardiomyopathy` = "PH1640",
`Dilated cardiomyopathy`      = "PH1638",
`Cardiomyopathy`              = "PH1646",
`Heart failure`               = "PH1645",
`Non-ischaemic cardiomyopathy`= "PH1639",
`Heart failure syndrome`      = "PH1643")
plot_code_overlap(pheno_ids = hermes_phenos, types = c("ICD10 codes"))
check()
install()
p <- plot_code_overlap(pheno_ids = hermes_phenos, types = c("ICD10 codes"))
p
load_all()
p <- plot_code_overlap(pheno_ids = hermes_phenos, types = c("ICD10 codes"))
p
install()
?eulerr::euler
load_all()
load_all()\
load_all()\
load_all()
load_all()
load_all()
library(heRmes)
# development phenotypes, ids named for readability only
hermes_phenos <- c(`Congenital heart disease`    = "PH1637",
`Myocardial infarction`       = "PH1636",
`Secondary cardiomyopathies`  = "PH1642",
`Hypertrophic cardiomyopathy` = "PH1640",
`Dilated cardiomyopathy`      = "PH1638",
`Cardiomyopathy`              = "PH1646",
`Heart failure`               = "PH1645",
`Non-ischaemic cardiomyopathy`= "PH1639",
`Heart failure syndrome`      = "PH1643")
plot_code_overlap(pheno_ids = hermes_phenos, types = c("ICD10 codes"))
load_all()
plot_code_overlap(pheno_ids = hermes_phenos, types = c("ICD10 codes"))
load_all()
plot_code_overlap(pheno_ids = hermes_phenos, types = c("ICD10 codes"))
load_all()
load_all()
document()
document()
document()
document()
document()
document()
document()
document()
load_all()
plot_code_overlap(pheno_ids = hermes_phenos, types = c("ICD10 codes"))
plot_code_overlap(pheno_ids = c("PH1645", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993"),
types = c("ICD10 codes", "ICD9 codes", "OPCS4 codes", "Read codes v2"))
load_all()
plot_code_overlap(pheno_ids = c("PH1645", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993"),
types = c("ICD10 codes", "ICD9 codes", "OPCS4 codes", "Read codes v2"))
load_all()
plot_code_overlap(pheno_ids = c("PH1645", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993"),
types = c("ICD10 codes", "ICD9 codes", "OPCS4 codes", "Read codes v2"))
load_all()
plot_code_overlap(pheno_ids = c("PH1645", "PH1028", "PH1055", "PH1074", "PH182", "PH25", "PH530", "PH531", "PH631", "PH687", "PH968", "PH993"),
types = c("ICD10 codes", "ICD9 codes", "OPCS4 codes", "Read codes v2"))
install()
plot_code_overlap(pheno_ids = hermes_phenos, types = c("ICD10 codes"))
dat <- data.table::data.table(id= c(LETTERS[1:5], LETTERS[1:5]),
a = sample(c(T,F), 20, replace = TRUE),
b = sample(c(T,F), 20, replace = TRUE),
c = sample(c(T,F), 20, replace = TRUE),
d = sample(c(T,F), 20, replace = TRUE))
View(dat)
dat <- data.table::data.table(id= c(LETTERS[1:10], LETTERS[1:10]),
a = sample(c(T,F), 20, replace = TRUE),
b = sample(c(T,F), 20, replace = TRUE),
c = sample(c(T,F), 20, replace = TRUE),
d = sample(c(T,F), 20, replace = TRUE))
View(dat)
cols <- c("a", "b", "c", "d")
dat[, pheno := all(mget(cols))]
dat[, pheno := all(.SD), .SDcols = cols]
View(dat)
dat[, pheno := rowSums(.SD), .SDcols = cols]
View(dat)
dat[F, ]
exclude_codes <- list()
seq_len(exclude_codes)
seq_along(exclude_codes)
foo="d"
dat[is.na(foo), bar:= T]
dat[!is.na(foo), bar:= T]
View(dat)
dat[foo==F, bar:= T]
View(dat)
dat[get(foo)==F, bar:= T]
View(dat)
dat[get(foo)==FALSE, bar:= T]
View(dat)
dat[get(foo)==FALSE, bar:= "d"]
dat[get(foo)==FALSE, bar:= "d"]
dat[, bar:= NULL]
dat[get(foo)==FALSE, bar:= "d"]
View(dat)
dat <- data.table::data.table(id= c(LETTERS[1:10], LETTERS[1:10]),
a = sample(c(T,F), 20, replace = TRUE),
b = sample(c(T,F), 20, replace = TRUE),
c = sample(c(T,F), 20, replace = TRUE),
d = sample(c(T,F), 20, replace = TRUE))
cols <- c("a", "b", "c", "d")
dat[, pheno := rowSums(mget(cols)) > 0]
cols <- c("a", "b", "c", "d")
dat[, pheno := rowSums(get(cols)) > 0]
set.seed(2020)
n   <- 10
dat <- data.frame(ids   = paste0("ID_", c(1:(n/2), 1:(n/2))),
codes = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE))
dat
name    = "Heart Failure"
codes   = dat$codes
include = list(HF = "PH1645")
exclude = list(congHD = "PH1637")
# create the data.table
dat <- data.table::data.table(id = ids, code = codes)
ids     = dat$ids
# create the data.table
dat <- data.table::data.table(id = ids, code = codes)
# get the pheno codes
include_codes <- lapply(include, function(x) get_codes(x))
names(include_codes) <- include
# get the exclusion codes
if (!is.null(exclude)) {
exclude_codes <- lapply(exclude, function(x) get_codes(x))
names(exclude_codes) <- exclude
} else {
exclude_codes <- list()
}
i=1
seq_along(include_codes)
include_codes[[i]]
names(include_codes)[i]
dat[include_codes[[i]], names(include_codes)[i] := TRUE, on = "code"]
View(dat)
dat[is.na(get(names(include_codes)[i])), names(include_codes)[i] := FALSE]
View(dat)
for (i in seq_along(exclude_codes)) {
dat[exclude_codes[[i]], names(exclude_codes)[i] := TRUE, on = "code"]
dat[is.na(get(names(exclude_codes)[i])), names(exclude_codes)[i] := FALSE]
}
View(dat)
c(names(include_codes), names(exclude_codes))
# compute the result
res <- dat[, c(names(include_codes), names(exclude_codes)) := lapply(.SD, any), .SDcols = c(names(include_codes), names(exclude_codes)), by = "id"]
View(res)
dat[, lapply(.SD, any), .SDcols = c(names(include_codes), names(exclude_codes)), by = "id"]
dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = "id"]
View(res)
View(res)
# compute the result
res <- dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = "id"]
View(res)
res[, (name) := rowSums(mget(names(include_codes)))]
names(include_codes)
res[, (name) := rowSums(.SD[, names(include_codes)])]
res[, (name) := rowSums(.SD[, names(include_codes)])]
if (length(names(include_codes)) > 1) {
res[, include := rowSums(.SD), .SDcols = names(include_codes)]
} else {
res[, include := get(names(include_codes))]
}
View(res)
if (length(names(exclude_codes)) > 1) {
res[, exclude := rowSums(.SD), .SDcols = names(exclude_codes)]
} else {
res[, exclude := get(names(exclude_codes))]
}
View(res)
# summarise / compute the result
res <- dat[, lapply(mget(c(names(include_codes), names(exclude_codes))), any), by = "id"]
# inclusions
if (length(names(include_codes)) > 1) {
res[, include := rowSums(.SD), .SDcols = names(include_codes)]
} else {
res[, include := get(names(include_codes))]
}
# exclusions
if (length(names(exclude_codes)) == 0) {
res[, exclude := FALSE]
} else if (length(names(exclude_codes)) == 1) {
res[, exclude := get(names(exclude_codes))]
} else {
res[, exclude := rowSums(.SD), .SDcols = names(exclude_codes)]
}
# final phenotype
res[, (name) := include & !exclude]
View(res)
load_all()
install()
phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HF = "PH1645"),
exclude = list(congHD = "PH1637"))
result <- phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HF = "PH1645"),
exclude = list(congHD = "PH1637"))
load_all()
load_all()
install()
load_all()
library(heRmes)
result <- phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1645"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
result <- phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1645"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
load_all()
result <- phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1645"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
ids     = dat$ids
set.seed(2020)
n   <- 10
dat <- data.frame(ids   = paste0("ID_", c(1:(n/2), 1:(n/2))),
codes = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE))
dat
result <- phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1645"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
View(result)
result <- phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1645", CM = "PH1646"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
View(dat)
View(result)
result <- phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
View(result)
load_all()
phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude = list(congHD = "PH1637", mi = "PH1636"))
phenotype(ids     = dat$ids,
codes   = dat$codes,
name    = "Heart Failure",
include = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude = list(congHD = "PH1637", mi = "PH1636"))[]
phenotype(ids     = dat$ids,
codes   = dat$codes,
include = list(HFsyn  = "PH1643", CM = "PH1646"),
exclude = list(congHD = "PH1637", mi = "PH1636"))[]
install()
?data.table::melt
View(dat)
set.seed(2020)
n   <- 10
dat <- data.frame(ids   = paste0("ID_", c(1:(n/2), 1:(n/2))),
codes = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE),
codes1 = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE))
dat
code_col=c("codes", "codes1")
id_col="ids"
dat[, names(dat)[!names(dat) %in% c(id_col, code_col)] := NULL]
x=dat
# create the data.table
dat <- data.table::as.data.table(x)
# remove other data
dat[, names(dat)[!names(dat) %in% c(id_col, code_col)] := NULL]
View(dat)
length(code_col) > 1
data.table::melt(dat, id.vars = id_col, variable.name = "code_var", value.name = "code", na.rm = TRUE)
View(dat)
dat[6:7, codes1 := NA_character_]
View(dat)
data.table::melt(dat, id.vars = id_col, variable.name = "code_var", value.name = "code", na.rm = TRUE)
data.table::melt(dat, id.vars = id_col, variable.name = "code_var", value.name = "code")
dat[, code_var := NULL]
dat <- data.table::melt(dat, id.vars = id_col, variable.name = "code_var", value.name = "code", na.rm = TRUE)
dat[, code_var := NULL]
View(dat)
# get the inclusion codes
include_codes <- lapply(include, function(x) get_codes(x))
load_all()
load_all()
load_all()
load_all()
