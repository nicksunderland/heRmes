heat_dat <- lapply(split(counts, by="cohort"), function(x) { dat[x, .(Concept, Code, Source, Count = i.count), on = c("Code"="code", "Source"="code_type"), nomatch = NULL]
})|> rbindlist(idcol="cohort")
View(heat_dat)
ggplot(heat_dat, aes(x=Code, y=cohort, fill=Count)) +
geom_tile() +
facet_wrap(~Source)
ggplot(heat_dat, aes(x=Code, y=cohort, fill=Count)) +
geom_tile() +
facet_wrap(~Source, scales = "free")
ggplot(heat_dat, aes(x=Code, y=cohort, fill=Count)) +
geom_tile() +
facet_wrap(~Source, scales = "free")
ggplot(heat_dat, aes(x=Code, y=cohort, fill=Count)) +
geom_col() +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(~Source, scales = "free")
ggplot(heat_dat, aes(x=Code, y=cohort, fill=Count)) +
geom_col() +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(~Source, scales = "free")
ggplot(heat_dat, aes(x=Code, y=Count, fill=Count)) +
geom_col() +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(~Source, scales = "free")
ggplot(heat_dat, aes(x=Code, y=Count, fill=Count)) +
geom_col() +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(~Source, scales = "free")
ggplot(heat_dat, aes(x=Code, y=Count, fill=Count, group=Source)) +
geom_col(position = position_dodge(width=1)) +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(~cohort, scales = "free")
ggplot(heat_dat, aes(x=Code, y=log(Count), fill=Count, group=Source)) +
geom_col(position = position_dodge(width=1)) +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(~cohort, scales = "free")
ggplot(heat_dat, aes(x=Code, y=log(Count), fill=Count, group=Source)) +
geom_col(position = position_dodge(width=1)) +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(~cohort, scales = "free")
ggplot(heat_dat, aes(x=Code, y=log(Count), fill=Count, group=Source)) +
geom_col(position = position_dodge(width=1)) +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(Source~cohort, scales = "free")
ggplot(heat_dat, aes(x=Code, y=log(Count), fill=Count, group=Source)) +
geom_col(position = position_dodge(width=1)) +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(Source~cohort, scales = "free")
heat_dat <- heat_dat[order(Count)][, Code := factor(Code, levels = unique(Code))]
ggplot(heat_dat, aes(x=Code, y=log(Count), fill=Count, group=Source)) +
geom_col(position = position_dodge(width=1)) +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(Source~cohort, scales = "free")
ggplot(heat_dat, aes(x=Code, y=Count, fill=Count)) +
geom_col(position = position_dodge(width=1)) +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(Source~cohort, scales = "free")
ggplot(heat_dat, aes(x=Code, y=Count, fill=Count)) +
geom_col(position = position_dodge(width=1)) +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(Source~cohort, scales = "free")
ggplot(heat_dat, aes(x=Code, y=Count, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(Source~cohort, scales = "free")
View(heat_dat)
heat_dat <- heat_dat[order(Count)][, Code := factor(Code, levels = unique(Code))][Count>10]
counts <- rbindlist(list("UK Biobank"  = ukbb_counts[, c("code", "code_type", "count")],
"NHS England" = nhs_counts[, c("code", "code_type", "count")],
"BioVU"       = biovu_counts[, c("code", "code_type", "count")]), idcol = "cohort")
counts <- counts[, .(count=sum(count)), by=c("cohort","code","code_type")]
heat_dat <- lapply(split(counts, by="cohort"), function(x) { dat[x, .(Concept, Code, Source, Count = i.count), on = c("Code"="code", "Source"="code_type"), nomatch = NULL]
})|> rbindlist(idcol="cohort")
heat_dat <- heat_dat[order(Count)][, Code := factor(Code, levels = unique(Code))][Count>10]
ggplot(heat_dat, aes(x=Code, y=Count, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(Source~cohort, scales = "free")
counts <- rbindlist(list("UK Biobank"  = ukbb_counts[, c("code", "code_type", "count")],
"NHS England" = nhs_counts[, c("code", "code_type", "count")],
"BioVU"       = biovu_counts[, c("code", "code_type", "count")]), idcol = "cohort")
counts <- counts[, .(count=sum(count)), by=c("cohort","code","code_type")]
heat_dat <- lapply(split(counts, by="cohort"), function(x) { dat[x, .(Concept, Code, Source, Count = i.count), on = c("Code"="code", "Source"="code_type"), nomatch = NULL]
})|> rbindlist(idcol="cohort")
heat_dat <- heat_dat[Count>10][order(Count)][, Code := factor(Code, levels = unique(Code))]
ggplot(heat_dat, aes(x=Code, y=Count, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(Source~cohort, scales = "free")
counts <- rbindlist(list("UK Biobank"  = ukbb_counts[, c("code", "code_type", "count")],
"NHS England" = nhs_counts[, c("code", "code_type", "count")],
"BioVU"       = biovu_counts[, c("code", "code_type", "count")]), idcol = "cohort")
counts <- counts[, .(count=sum(count)), by=c("cohort","code","code_type")]
heat_dat <- lapply(split(counts, by="cohort"), function(x) { dat[x, .(Concept, Code, Source, Count = i.count), on = c("Code"="code", "Source"="code_type"), nomatch = NULL]
})|> rbindlist(idcol="cohort")
heat_dat <- heat_dat[Count>100][order(Count)][, Code := factor(Code, levels = unique(Code))]
ggplot(heat_dat, aes(x=Code, y=Count, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(Source~cohort, scales = "free")
ggplot(heat_dat, aes(x=Code, y=Count, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw() +
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(Source~cohort, scales = "free")
ggplot(heat_dat, aes(x=Code, y=Count, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw() +
theme(axis.text.x = element_text(angle=90, vjust = 0)) +
facet_wrap(Source~cohort, scales = "free")
ggplot(heat_dat, aes(x=Code, y=Count, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw() +
theme(axis.text.x = element_text(angle=90, vjust = 1)) +
facet_wrap(Source~cohort, scales = "free")
ggplot(heat_dat, aes(x=Code, y=Count, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw() +
theme(axis.text.x = element_text(angle=90, hjust = 1)) +
facet_wrap(Source~cohort, scales = "free")
ggplot(heat_dat, aes(x=Code, y=Count, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw() +
theme(axis.text.x = element_text(angle=90, hjust = 0)) +
facet_wrap(Source~cohort, scales = "free")
ggplot(heat_dat, aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw() +
facet_wrap(cohort~Source, scales = "free")
ggplot(heat_dat, aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw() +
theme(axis.text.y = element_text(size=6)) +
facet_wrap(cohort~Source, scales = "free")
ggplot(heat_dat, aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw() +
theme(axis.text.y = element_text(size=6)) +
facet_grid(rows = vars(cohort), cols = vars(Source), scales = "free")
ggplot(heat_dat, aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw() +
theme(axis.text.y = element_text(size=6)) +
facet_wrap(Source~cohort, ncol=3, scales = "free")
heat_dat[, Source := factor(Source, levels=unique(Source))]
ggplot(heat_dat, aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw() +
theme(axis.text.y = element_text(size=6)) +
facet_wrap(Source~cohort, ncol=3, scales = "free")
heat_dat <- lapply(split(counts, by="cohort"), function(x) { dat[x, .(Concept, Code, Source, Count = i.count), on = c("Code"="code", "Source"="code_type"), nomatch = NULL]
})|> rbindlist(idcol="cohort")
heat_dat <- heat_dat[Count>100][order(Count)][, Code := factor(Code, levels = unique(Code))]
heat_dat[, Source := factor(Source, levels=unique(Source))]
heat_dat[, cohort := factor(cohort, levels=unique(cohort))]
ggplot(heat_dat, aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw() +
theme(axis.text.y = element_text(size=6)) +
facet_wrap(Source~cohort, ncol=3, scales = "free")
counts <- rbindlist(list("UK Biobank"  = ukbb_counts[, c("code", "code_type", "count")],
"NHS England" = nhs_counts[, c("code", "code_type", "count")],
"BioVU"       = biovu_counts[, c("code", "code_type", "count")]), idcol = "cohort")
counts <- counts[, .(count=sum(count)), by=c("cohort","code","code_type")]
heat_dat <- lapply(split(counts, by="cohort"), function(x) { dat[x, .(Concept, Code, Source, Count = i.count), on = c("Code"="code", "Source"="code_type"), nomatch = NULL]
})|> rbindlist(idcol="cohort")
heat_dat <- heat_dat[order(Count)][, Code := factor(Code, levels = unique(Code))]
heat_dat[, Source := factor(Source, levels=unique(Source))]
heat_dat[, cohort := factor(cohort, levels=unique(cohort))]
counts <- rbindlist(list("UK Biobank"  = ukbb_counts[, c("code", "code_type", "count")],
"NHS England" = nhs_counts[, c("code", "code_type", "count")],
"BioVU"       = biovu_counts[, c("code", "code_type", "count")]), idcol = "cohort")
counts <- counts[, .(count=sum(count)), by=c("cohort","code","code_type")]
heat_dat <- lapply(split(counts, by="cohort"), function(x) { dat[x, .(concept, Concept, Code, Source, Count = i.count), on = c("Code"="code", "Source"="code_type"), nomatch = NULL]
})|> rbindlist(idcol="cohort")
heat_dat <- heat_dat[order(Count)][, Code := factor(Code, levels = unique(Code))]
heat_dat[, Source := factor(Source, levels=unique(Source))]
heat_dat[, cohort := factor(cohort, levels=unique(cohort))]
heat_dat <- heat_dat[order(Count)][, Code := factor(Code, levels = unique(Code))]
heat_dat[, Source := factor(Source, levels=unique(Source))]
heat_dat[, cohort := factor(cohort, levels=unique(cohort))]
for (con in unique(dat$concept)) {
p <- ggplot(heat_dat[concept==con], aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw() +
theme(axis.text.y = element_text(size=6)) +
facet_wrap(Source~cohort, scales = "free")
png(paste0("/Users/xx20081/git/heRmes/vignettes/figures/counts_", con, ".png"), height=600, width=600)
print(p)
dev.off()
}
for (con in unique(dat$concept)) {
p <- ggplot(heat_dat[concept==con], aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw(base_size=14) +
theme(axis.text.y = element_text() +
facet_wrap(Source~cohort, scales = "free")
png(paste0("/Users/xx20081/git/heRmes/vignettes/figures/counts_", con, ".png"), height=600, width=600)
for (con in unique(dat$concept)) {
p <- ggplot(heat_dat[concept==con], aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw(base_size=14) +
theme(axis.text.y = element_text() +
facet_wrap(Source~cohort, scales = "free")
png(paste0("/Users/xx20081/git/heRmes/vignettes/figures/counts_", con, ".png"), height=600, width=600)
for (con in unique(dat$concept)) {
p <- ggplot(heat_dat[concept==con], aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw(base_size=14) +
facet_wrap(Source~cohort, scales = "free")
png(paste0("/Users/xx20081/git/heRmes/vignettes/figures/counts_", con, ".png"), height=600, width=600)
print(p)
dev.off()
}
for (con in unique(dat$concept)) {
p <- ggplot(heat_dat[concept==con], aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw(base_size=14) +
theme(legend.position = "none") +
facet_wrap(Source~cohort, scales = "free")
png(paste0("/Users/xx20081/git/heRmes/vignettes/figures/counts_", con, ".png"), height=600, width=600)
print(p)
dev.off()
}
for (con in unique(dat$concept)) {
p <- ggplot(heat_dat[concept==con & count>10], aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw(base_size=14) +
theme(legend.position = "none") +
facet_wrap(Source~cohort, scales = "free")
png(paste0("/Users/xx20081/git/heRmes/vignettes/figures/counts_", con, ".png"), height=600, width=600)
print(p)
dev.off()
}
for (con in unique(dat$concept)) {
p <- ggplot(heat_dat[concept==con & Count>10], aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw(base_size=14) +
theme(legend.position = "none") +
facet_wrap(Source~cohort, scales = "free")
png(paste0("/Users/xx20081/git/heRmes/vignettes/figures/counts_", con, ".png"), height=600, width=600)
print(p)
dev.off()
}
items_file    <- "/Users/xx20081/Desktop/hf_mvmr/output/tables/ukbb_items.gz"
hes_file      <- "/Users/xx20081/Desktop/hesin.txt"
hes_diag_file <- "/Users/xx20081/Desktop/hesin_diag.txt"
out_file      <- "/Users/xx20081/Desktop/hf_mvmr/output/tables/ukbb_individual_codes.gz"
library(data.table)
library(lubridate)
# read in the UKBB items
items <- fread(items_file)
# define the cohort
cohort <- items[, list(eid             = eid,
dob             = ymd(paste0(year_of_birth_1, "-", month_of_birth_1, "-", "1")),
sex             = factor(sex_1, levels = 0:1, labels = c("female", "male")),
sbp             = sbp_1,
hr              = hr_1,
alcohol_intake  = factor(alcohol_intake_1, levels = 1:6, labels = c("Daily or almost daily", "Three or four times a week", "Once or twice a week", "One to three times a month", "Special occasions only", "Never")),
ever_smoked     = factor(ever_smoked_1, levels = 0:1, labels = c("no", "yes")),
assessment_date = as_date(assessment_date_1),
assessment_age  = assessment_age_1,
bmi             = bmi_1,
waist_circ      = waist_circ_1,
hip_circ        = hip_circ_1)]
# check date of birth
if (any(is.na(cohort$dob))) {
message(paste("unable to parse", sum(is.na(cohort$dob)), "date of birth elements - estimating from age at assessment..."))
cohort[is.na(cohort$dob), dob :=  `%m-%`(as.Date(assessment_date), years(assessment_age))]
if (any(is.na(cohort$dob))) stop("failed to calculate some date of births")
if (any(cohort$dob > as.Date("1972-01-01"))) stop("some ages / dob indicate cohort age <37, need to check as UKBB didn't recruit younger adults")
}
# get the date of each self reported illness code
self_rep_code_cols <- grep("^non_cancer_illness_code_self_reported|^cancer_illness_code", names(items), value = TRUE)
self_rep_year_age_cols <- grep("^non_cancer_illness_code_(year|age)|^cancer_illness_code_(year|age)", names(items), value = TRUE)
items[, (self_rep_code_cols) := lapply(.SD, as.character), .SDcols = self_rep_code_cols]
items[, (self_rep_year_age_cols) := lapply(.SD, as.numeric), .SDcols = self_rep_year_age_cols]
self_rep_illness <- data.table::melt(items,
id.vars = "eid",
measure = patterns("^non_cancer_illness_code_self_reported|^cancer_illness_code", "^non_cancer_illness_code_year|^cancer_illness_code_year", "^non_cancer_illness_code_age|^cancer_illness_code_age"),
variable.name = "element",
value.name = c("code", "year", "age"),
na.rm = TRUE
)
# deal with unknown time of disease - could set to just before assessment if only looking at post assessment time period
# just remove for now (small numbers of HF n=8)
self_rep_illness <- self_rep_illness[age != -1 & age != -3] # unknown / prefer not to answer
self_rep_illness[, date := lubridate::ymd(paste0(as.character(floor(year)), "-01-01")) + lubridate::days(as.integer(365.25 * (year - floor(year))))]
self_rep_illness[, c("year", "element") := NULL]
self_rep_illness[, code_type := "ukbb_self_reported_illness"]
self_rep_illness[, code := as.character(code)]
# check self report illness table
if (any(is.na(self_rep_illness$date))) {
message(paste("unable to parse", sum(is.na(self_rep_illness$date)), "dates for self-reported illness codes --> removing"))
self_rep_illness <- self_rep_illness[!is.na(date), ]
}
if (any(self_rep_illness$date < as.Date("1900-01-01"))) {
stop("are you sure something happened before 1900?")
}
if (any(self_rep_illness$age < 0 | self_rep_illness$age > 100)) {
stop("likely error with ages of self reported illness")
}
# get the inpatient diagnosis codes, age, and date
hes <- data.table::fread(hes_file)[is.na(epistart) | epistart == "", epistart := admidate]
diag <- data.table::fread(hes_diag_file)
diag[hes, date := lubridate::dmy(i.epistart), on = c("eid", "ins_index")]
diag[items, c("assessment_date", "assessment_age") := list(lubridate::as_date(i.assessment_date_1), i.assessment_age_1), on = "eid"]
diag[, age := assessment_age + as.numeric(difftime(date, assessment_date, units = "days") / 365.25)]
diag[diag_icd9 == "", diag_icd9 := NA_character_]
diag[diag_icd10 == "", diag_icd10 := NA_character_]
diag <- data.table::melt(diag,
id.vars = c("eid", "date", "age"),
measure.vars  = c("diag_icd9", "diag_icd10"),
variable.name = "code_type",
value.name = "code",
na.rm = TRUE)
diag[, code_type := data.table::fcase(code_type == "diag_icd9", "icd9",
code_type == "diag_icd10", "icd10")]
# bind together the diagnostic codes
combined <- rbind(self_rep_illness, diag)
# save
data.table::fwrite(combined, out_file, sep = "\t")
ukbb_codes    <- "/Users/xx20081/Desktop/hf_mvmr/output/tables/ukbb_individual_codes.gz"
library(data.table)
ukbb_codes    <- "/Users/xx20081/Desktop/hf_mvmr/output/tables/ukbb_individual_codes.gz"
library(data.table)
codes <- fread(ukbb_codes)
length(unique(codes$code))
table(codes$code)
sort(table(codes$code))
footable(codes$code)
foo=table(codes$code)
foo=as.data.frame(table(codes$code))
View(foo)
sum(foo$Freq >100)
sum(foo$Freq >1000)
ukbb_codes  <- "/Users/xx20081/Desktop/hf_mvmr/output/tables/ukbb_individual_codes.gz"
code_file   <- "/Users/xx20081/Desktop/hf_mvmr/output/tables/code_table.tsv"
icd10_file  <- "/Users/xx20081/Library/CloudStorage/OneDrive-UniversityofBristol/phenotyping/ICD10_Edition5_20160401/Content/ICD10_Edition5_CodesAndTitlesAndMetadata_GB_20160401.txt"
library(data.table)
library(glmnet)
library(doMC)
ukbb_dat <- fread(ukbb_codes)
codes    <- fread(code_file)
icd10    <- fread(icd10_file)
ukbb_dat[codes, group := i.group, on=c("code","code_type")]
ukbb_dat[ukbb_dat[group=="hermes_heart_failure"][, hf_first_date := min(date), by="eid"], hf_first_date := i.hf_first_date, on="eid"]
ukbb_dat <- ukbb_dat[!code %in% c("sbp", "hr")]# lots of missing "sbp", "hr",
static_codes <- c("sex_male", "alcohol_intake", "ever_smoked", "bmi", "waist_circ", "hip_circ")
ukbb_dat <- ukbb_dat[is.na(hf_first_date) | code %in% static_codes | date < hf_first_date]
ukbb_dat[, hf := as.integer(!is.na(hf_first_date))]
code_table <- as.data.table(table(ukbb_dat$code))[N > 5000][]
ukbb_dat <- ukbb_dat[code %in% code_table$V1]
ukbb_dat <- dcast(ukbb_dat, eid + hf ~ code, value.var = "value", fill = 0, fun.aggregate = mean)
continuous_vars <- c("alcohol_intake","bmi","waist_circ","hip_circ")
ukbb_miss <- ukbb_dat[(rowSums(ukbb_dat[, ..continuous_vars] == 0) > 0), ..continuous_vars]
ukbb_dat  <- ukbb_dat[!(rowSums(ukbb_dat[, ..continuous_vars] == 0) > 0)]
# Separate predictors (X) and outcome (y)
# Scale continuous variables and keep binary variables as is
binary_vars <- setdiff(names(ukbb_dat), c(continuous_vars, "hf", "eid"))
# Create a matrix of scaled continuous variables and binary variables
n <- 10000
X <- as.matrix(cbind(scale(ukbb_dat[, ..continuous_vars]), ukbb_dat[, ..binary_vars]))[1:n,]
# Extract the outcome variable
y <- ukbb_dat$hf[1:n]
# Perform Lasso regularization with cross-validation
registerDoMC(cores = 12)
lasso_cv <- cv.glmnet(X, y, family = "binomial", alpha = 1, nfolds = 10, parallel=TRUE)
# Plot the cross-validation curve (optional)
plot(lasso_cv)
# Get the best lambda value
best_lambda <- lasso_cv$lambda.min
print(paste("Best Lambda:", best_lambda))
# Fit the final Lasso model using the best lambda
lasso_model <- glmnet(X, y, family = "binomial", alpha = 1, lambda = best_lambda, parallel=TRUE)
# Extract the names of the selected features
lasso_coefs <- coef(lasso_model)
selected_features <- data.table(code = rownames(lasso_coefs)[which(lasso_coefs != 0)],
coef = lasso_coefs[which(lasso_coefs != 0)])[order(-abs(coef))]
selected_features[icd10, desc := i.DESCRIPTION, on=c("code"="ALT_CODE")]
selected_features
ukbb_dat <- fread(ukbb_codes)
codes    <- fread(code_file)
icd10    <- fread(icd10_file)
View(ukbb_dat)
ukbb_non_file<- "/Users/xx20081/Desktop/hf_mvmr/output/tables/ukbb_selfreported_codes.tsv"
ukbb_can_file<- "/Users/xx20081/Desktop/hf_mvmr/output/tables/ukbb_selfreported_cancer_codes.tsv"
ukbb_non <- fread(ukbb_non_file)
ukbb_can <- fread(ukbb_can_file)
library(data.table)
library(glmnet)
library(doMC)
ukbb_dat <- fread(ukbb_codes)
codes    <- fread(code_file)
icd10    <- fread(icd10_file)
ukbb_non <- fread(ukbb_non_file)
ukbb_can <- fread(ukbb_can_file)
ukbb_dat[codes, group := i.group, on=c("code","code_type")]
ukbb_dat[ukbb_dat[group=="hermes_heart_failure"][, hf_first_date := min(date), by="eid"], hf_first_date := i.hf_first_date, on="eid"]
ukbb_dat <- ukbb_dat[!code %in% c("sbp", "hr")]# lots of missing "sbp", "hr",
static_codes <- c("sex_male", "alcohol_intake", "ever_smoked", "bmi", "waist_circ", "hip_circ")
ukbb_dat <- ukbb_dat[is.na(hf_first_date) | code %in% static_codes | date < hf_first_date]
ukbb_dat[, hf := as.integer(!is.na(hf_first_date))]
code_table <- as.data.table(table(ukbb_dat$code))[N > 5000][]
ukbb_dat <- ukbb_dat[code %in% code_table$V1]
ukbb_dat <- dcast(ukbb_dat, eid + hf + code_type ~ code, value.var = "value", fill = 0, fun.aggregate = mean)
library(heRmes)
library(readxl)
library(data.table)
library(glue)
library(irr)
file <- "/Users/xx20081/Library/CloudStorage/OneDrive-SharedLibraries-VUMC/Shaffer, Lauren L - Phenotype Workstream/phenotyping_code_consensus/nih_cardiomyopathy_phenotyping_combined.xlsx"
tabs <- list(DCM_IsA                         = "DCM_IsA",
LVSD_IsA                        = "LVSD_IsA",
Myocardial_infarction           = "Myocardial_infarction",
Coronary_artery_bypass_grafting = "Coronary_artery_bypass_grafting",
Percutaneous_coronary_intervent = "Percutaneous_coronary_intervent",
Thrombolysis_coronary           = "Thrombolysis_coronary",
Congenital_heart_disease        = "Congenital_heart_disease",
Congenital_heart_procedure      = "Congenital_heart_procedure")
meta <- lapply(tabs, function(x) {
r <- read_xlsx(file, x, n_max=5, col_names=FALSE)
d <- data.table()
d[, r$...1 := lapply(r$...2, function(x) x[[1]])]
}) |> rbindlist(idcol="concept")
dat <- lapply(tabs, function(x) read_xlsx(file, x, skip=13)) |> rbindlist(idcol="concept")
cols <- c("QW","RTL","NS","LL","Concensus")
dat[, (cols) := lapply(.SD, function(x) as.numeric(!is.na(x))), .SDcols = cols]
dat <- dat[Concensus==1 & Source != "SNOMED"]
dat[, agreement := rowSums(.SD)/4, .SDcols = c("QW","RTL","NS","LL")]
dat[meta, Concept := i.Title, on="concept"]
fwrite(dat, "/Users/xx20081/git/heRmes/vignettes/figures/cardiomyopathy_codes_dat.tsv", sep="\t")
fwrite(meta, "/Users/xx20081/git/heRmes/vignettes/figures/cardiomyopathy_metadata_dat.tsv", sep="\t")
fwrite(dat[, .(Concept, Code, Source, Description)], "/Users/xx20081/git/heRmes/inst/extdata/nih_cardiomyopathy_codes/cardiomyopathy_codes.tsv", sep="\t")
fwrite(meta[, .(Concept=Title, Definition, Reference, Terminologies, `Search expressions`)], "/Users/xx20081/git/heRmes/inst/extdata/nih_cardiomyopathy_codes/cardiomyopathy_metadata.tsv", sep="\t")
library(data.table)
library(ggplot2)
library(hfphenotyping)
counts <- rbindlist(list("UK Biobank"  = ukbb_counts[, c("code", "code_type", "count")],
"NHS England" = nhs_counts[, c("code", "code_type", "count")],
"BioVU"       = biovu_counts[, c("code", "code_type", "count")]), idcol = "cohort")
counts <- counts[, .(count=sum(count)), by=c("cohort","code","code_type")]
heat_dat <- lapply(split(counts, by="cohort"), function(x) { dat[x, .(concept, Concept, Code, Source, Count = i.count), on = c("Code"="code", "Source"="code_type"), nomatch = NULL]
})|> rbindlist(idcol="cohort")
heat_dat <- heat_dat[order(Count)][, Code := factor(Code, levels = unique(Code))]
heat_dat[, Source := factor(Source, levels=unique(Source))]
heat_dat[, cohort := factor(cohort, levels=unique(cohort))]
for (con in unique(dat$concept)) {
p <- ggplot(heat_dat[concept==con & Count>10], aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw(base_size=14) +
theme(legend.position = "none") +
facet_wrap(Source~cohort, scales = "free")
png(paste0("/Users/xx20081/git/heRmes/vignettes/figures/counts_", con, ".png"), height=600, width=600)
print(p)
dev.off()
}
for (con in unique(dat$concept)) {
p <- ggplot(heat_dat[concept==con & Count>10], aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw(base_size=14) +
theme(legend.position = "none",
axis.text.y = element_text(size=10)) +
facet_wrap(Source~cohort, scales = "free")
png(paste0("/Users/xx20081/git/heRmes/vignettes/figures/counts_", con, ".png"), height=600, width=600)
print(p)
dev.off()
}
for (con in unique(dat$concept)) {
p <- ggplot(heat_dat[concept==con & Count>10], aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw(base_size=14) +
theme(legend.position = "none",
axis.text.y = element_text(size=8)) +
facet_wrap(Source~cohort, scales = "free")
png(paste0("/Users/xx20081/git/heRmes/vignettes/figures/counts_", con, ".png"), height=1000, width=600)
print(p)
dev.off()
}
for (con in unique(dat$concept)) {
p <- ggplot(heat_dat[concept==con & Count>10], aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw(base_size=14) +
theme(legend.position = "none",
axis.text.y = element_text(size=6)) +
facet_wrap(Source~cohort, scales = "free")
png(paste0("/Users/xx20081/git/heRmes/vignettes/figures/counts_", con, ".png"), height=800, width=600)
print(p)
dev.off()
}
for (con in unique(dat$concept)) {
p <- ggplot(heat_dat[concept==con & Count>10], aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw(base_size=14) +
theme(legend.position = "none",
axis.text.y = element_text(size=7)) +
facet_wrap(Source~cohort, scales = "free")
png(paste0("/Users/xx20081/git/heRmes/vignettes/figures/counts_", con, ".png"), height=800, width=800)
print(p)
dev.off()
}
for (con in unique(dat$concept)) {
p <- ggplot(heat_dat[concept==con & Count>10], aes(x=Count, y=Code, fill=log(Count))) +
geom_col(position = position_dodge(width=1)) +
theme_bw(base_size=14) +
theme(legend.position = "none",
axis.text.y = element_text(size=8)) +
facet_wrap(Source~cohort, scales = "free")
png(paste0("/Users/xx20081/git/heRmes/vignettes/figures/counts_", con, ".png"), height=700, width=700)
print(p)
dev.off()
}
