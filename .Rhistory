search_results     = client$phenotypes$get(search = "cardiomyopathy")
View(search_results)
client$phenotypes$get(search = "DCM")
client$phenotypes$get(search = "HCM")
client$phenotypes$get(search = "cardio*")
client$phenotypes$get(search = "cardio")
client$phenotypes$get(search = "heart")
search_results     = client$phenotypes$get(search = "heart")
View(search_results)
search_results     = client$phenotypes$get(search = "dilated cardiomyopathy")
View(phenotype_codelist)
View(search_results)
search_results     = client$phenotypes$get(search = "heart failure")
View(search_results)
View(search_results)
search_results     = client$phenotypes$get(search = "cardiomyopathy")
View(search_results)
search_results     = client$phenotypes$get(search = "nonischaemic cardiomyopathy")
search_results     = client$phenotypes$get(search = "non-ischaemic cardiomyopathy")
search_results <- lapply(search_terms, function(x) client$phenotypes$get(search = x)) |> rbind()
# get phenotypes
search_terms <- c("heart failure", "cardiomyopathy")
search_results <- lapply(search_terms, function(x) client$phenotypes$get(search = x)) |> rbind()
View(search_results)
library(usethis)
use_data_table()
search_terms <- c("heart failure", "cardiomyopathy")
search_results <- lapply(search_terms, function(x) client$phenotypes$get(search = x)) |> data.table::rbindlist()
search_results <- lapply(search_terms, function(x) client$phenotypes$get(search = x)) |> data.table::rbindlist(fill = TRUE)
search_results <- lapply(search_terms, function(x) client$phenotypes$get(search = x))
View(search_results)
rbind(search_results[[1]], search_results[[2]])
res<-search_results[[2]])
res<-search_results[[2]]
View(res)
View(res[[8]][[1]])
View(res[[17]][[1]])
search_results <- lapply(search_terms, function(x) client$phenotypes$get(search = x)[, c("name", "phenotype_id")]) |>
data.table::rbindlist()
View(search_results)
install.packages("igraph")
use_package("igraph")
size <- 10
dat <- matrix(sample(c(0,1), size ^ 2, replace = TRUE, prob = c(0.9, 0.1)), nrow = size, ncol = size)
size <- 10
mat <- matrix(sample(c(0,1), size ^ 2, replace = TRUE, prob = c(0.9, 0.1)), nrow = size, ncol = size)
diag(mat) <- 0
colnames(mat) = rownames(mat) = LETTERS[1:size]
network <- igraph::graph_from_adjacency_matrix(mat)
plot(network)
?plot
?graph_from_adjacency_matrix
View(network)
V(network)
igraph::V(network)
code_colours <- sample(c("red", "green"), size, replace = TRUE)
igraph::V(network)$color <- code_colours
igraph::V(network)
View(network)
size <- 10
mat <- matrix(sample(c(0,1), size ^ 2, replace = TRUE, prob = c(0.9, 0.1)), nrow = size, ncol = size)
codes <- LETTERS[1:size]
code_colours <- sample(c("red", "green"), size, replace = TRUE)
colnames(mat) = rownames(mat) = LETTERS[1:size]
network <- igraph::graph_from_adjacency_matrix(mat, diag = FALSE)
igraph::V(network)$color <- code_colours
plot(network)
igraph::V(network)$color
igraph::V(network)
install.packages("httr")
library(httr)
# Variables
api_key <- "a1452beab2f941b0c32402fc82e4c6724694544d"  # Replace with your actual API key
item_number <- 258  # Example item number, change as necessary
# Create the request URL
url <- paste0("https://isd.digital.nhs.uk/trud/api/v1/keys/", api_key, "/items/", item_number, "/releases?latest")
# Make the HTTP GET request
response <- GET(url)
# Check the status of the response
if (status_code(response) == 200) {
# Request was successful, parse JSON
releases_info <- content(response, "parsed")
print(releases_info)
} else {
# Handle possible errors
print(paste("Error with status code:", status_code(response)))
error_details <- content(response, "parsed")
print(error_details$message)
}
api_key <- "a1452beab2f941b0c32402fc82e4c6724694544d"  # Replace with your actual API key
item_number <- 14  # Example item number, change as necessary
# Create the request URL
url <- paste0("https://isd.digital.nhs.uk/trud/api/v1/keys/", api_key, "/items/", item_number, "/releases?latest")
# Make the HTTP GET request
response <- GET(url)
# Check the status of the response
if (status_code(response) == 200) {
# Request was successful, parse JSON
releases_info <- content(response, "parsed")
print(releases_info)
} else {
# Handle possible errors
print(paste("Error with status code:", status_code(response)))
error_details <- content(response, "parsed")
print(error_details$message)
}
api_key <- "a1452beab2f941b0c32402fc82e4c6724694544d"  # Replace with your actual API key
item_number <- 123  # Example item number, change as necessary
# Create the request URL
url <- paste0("https://isd.digital.nhs.uk/trud/api/v1/keys/", api_key, "/items/", item_number, "/releases?latest")
# Make the HTTP GET request
response <- GET(url)
# Check the status of the response
if (status_code(response) == 200) {
# Request was successful, parse JSON
releases_info <- content(response, "parsed")
print(releases_info)
} else {
# Handle possible errors
print(paste("Error with status code:", status_code(response)))
error_details <- content(response, "parsed")
print(error_details$message)
}
api_key <- "a1452beab2f941b0c32402fc82e4c6724694544d"  # Replace with your actual API key
item_number <- 123  # Example item number, change as necessary
# Create the request URL
url <- paste0("https://isd.digital.nhs.uk/trud/api/v1/keys/", api_key, "/items/", item_number, "/releases?latest")
# Make the HTTP GET request
response <- GET(url)
# Check the status of the response
if (status_code(response) == 200) {
# Request was successful, parse JSON
releases_info <- content(response, "parsed")
print(releases_info)
} else {
# Handle possible errors
print(paste("Error with status code:", status_code(response)))
error_details <- content(response, "parsed")
print(error_details$message)
}
url
api_key <- "a1452beab2f941b0c32402fc82e4c6724694544d"  # Replace with your actual API key
item_number <- 1  # Example item number, change as necessary
# Create the request URL
url <- paste0("https://isd.digital.nhs.uk/trud/api/v1/keys/", api_key, "/items/", item_number, "/releases?latest")
# Make the HTTP GET request
response <- GET(url)
# Check the status of the response
if (status_code(response) == 200) {
# Request was successful, parse JSON
releases_info <- content(response, "parsed")
print(releases_info)
} else {
# Handle possible errors
print(paste("Error with status code:", status_code(response)))
error_details <- content(response, "parsed")
print(error_details$message)
}
api_key <- "a1452beab2f941b0c32402fc82e4c6724694544d"  # Replace with your actual API key
item_number <- 248  # Example item number, change as necessary
# Create the request URL
url <- paste0("https://isd.digital.nhs.uk/trud/api/v1/keys/", api_key, "/items/", item_number, "/releases?latest")
# Make the HTTP GET request
response <- GET(url)
# Check the status of the response
if (status_code(response) == 200) {
# Request was successful, parse JSON
releases_info <- content(response, "parsed")
print(releases_info)
} else {
# Handle possible errors
print(paste("Error with status code:", status_code(response)))
error_details <- content(response, "parsed")
print(error_details$message)
}
check()
library(devtools)
check()
install()
file.path(system.file("extdata", package = "heRmes"), "icd10cm-Codes-Descriptions-April-2024.zip")
url <- "https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM/2024-Update/icd10cm-Codes-Descriptions-April-2024.zip"
dest <- file.path(system.file("extdata", package = "heRmes"), "icd10cm-Codes-Descriptions-April-2024.zip")
download.file(url, dest)
install()
code_file <- file.path(system.file("extdata", "icd10cm", package = "heRmes"),  "icd10cm-Codes-Descriptions-April-2024", "icd10cm-codes-April-2024.txt")
try({
if (!file.exists(code_file)) {
url <- "https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM/2024-Update/icd10cm-Codes-Descriptions-April-2024.zip"
dest <- file.path(system.file("extdata", "icd10cm", package = "heRmes"),  "icd10cm-Codes-Descriptions-April-2024.zip")
download.file(url, dest)
unzip(dest, exdir = "icd10cm-Codes-Descriptions-April-2024")
}
if (!file.exists(code_file)) stop("ICD10-CM download failed")
})
code_file <- file.path(system.file("extdata", "icd10cm", package = "heRmes"),  "icd10cm-Codes-Descriptions-April-2024", "icd10cm-codes-April-2024.txt")
try({
if (!file.exists(code_file)) {
url <- "https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM/2024-Update/icd10cm-Codes-Descriptions-April-2024.zip"
dest <- file.path(system.file("extdata", "icd10cm", package = "heRmes"),  "icd10cm-Codes-Descriptions-April-2024.zip")
download.file(url, dest)
unzip(dest, exdir = file.path(system.file("extdata", "icd10cm", package = "heRmes"), "icd10cm-Codes-Descriptions-April-2024"))
}
if (!file.exists(code_file)) stop("ICD10-CM download failed")
})
file.path(system.file("extdata", "icd10cm", package = "heRmes"), "icd10cm-Codes-Descriptions-April-2024")
system.file("extdata", "icd10cm", package = "heRmes")
install()
install()
install()
library(devtools)
library(devtools)
library(usethis)
install()
try({
if (!file.exists(code_file)) {
url <- "https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM/2024-Update/icd10cm-Codes-Descriptions-April-2024.zip"
dest <- file.path(system.file("extdata", "icd10cm", package = "heRmes"),  "icd10cm-Codes-Descriptions-April-2024.zip")
download.file(url, dest)
unzip(dest, exdir = file.path(system.file("extdata", "icd10cm", package = "heRmes"), "icd10cm-Codes-Descriptions-April-2024"))
}
if (!file.exists(code_file)) stop("ICD10-CM download failed")
})
code_file <- file.path(system.file("extdata", "icd10cm", package = "heRmes"),  "icd10cm-Codes-Descriptions-April-2024", "icd10cm-codes-April-2024.txt")
try({
if (!file.exists(code_file)) {
url <- "https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM/2024-Update/icd10cm-Codes-Descriptions-April-2024.zip"
dest <- file.path(system.file("extdata", "icd10cm", package = "heRmes"),  "icd10cm-Codes-Descriptions-April-2024.zip")
download.file(url, dest)
unzip(dest, exdir = file.path(system.file("extdata", "icd10cm", package = "heRmes"), "icd10cm-Codes-Descriptions-April-2024"))
}
if (!file.exists(code_file)) stop("ICD10-CM download failed")
})
file.path(system.file("extdata", "icd10cm", package = "heRmes"), "icd10cm-Codes-Descriptions-April-2024")
system.file("extdata", "icd10cm", package = "heRmes")
system.file("extdata", package = "heRmes")
file.path(system.file("extdata", package = "heRmes"), "icd10cm", "icd10cm-Codes-Descriptions-April-2024.zip")
url <- "https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM/2024-Update/icd10cm-Codes-Descriptions-April-2024.zip"
dest <- file.path(system.file("extdata", package = "heRmes"), "icd10cm", "icd10cm-Codes-Descriptions-April-2024.zip")
download.file(url, dest)
code_file <- file.path(system.file("extdata", "icd10cm", package = "heRmes"),  "icd10cm-Codes-Descriptions-April-2024", "icd10cm-codes-April-2024.txt")
try({
if (!file.exists(code_file)) {
url <- "https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM/2024-Update/icd10cm-Codes-Descriptions-April-2024.zip"
dest <- file.path(system.file("extdata", package = "heRmes"), "icd10cm", "icd10cm-Codes-Descriptions-April-2024.zip")
dir.create(dest, showWarnings = FALSE, recursive = TRUE)
download.file(url, dest)
unzip(dest, exdir = file.path(system.file("extdata", "icd10cm", package = "heRmes"), "icd10cm-Codes-Descriptions-April-2024"))
}
})
!file.exists(code_file)
url <- "https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM/2024-Update/icd10cm-Codes-Descriptions-April-2024.zip"
dest <- file.path(system.file("extdata", package = "heRmes"), "icd10cm", "icd10cm-Codes-Descriptions-April-2024.zip")
dir.create(dest, showWarnings = FALSE, recursive = TRUE)
dest
dir <- file.path(system.file("extdata", package = "heRmes"), "icd10cm")
url <- "https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM/2024-Update/icd10cm-Codes-Descriptions-April-2024.zip"
dir <- file.path(system.file("extdata", package = "heRmes"), "icd10cm")
url <- "https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM/2024-Update/icd10cm-Codes-Descriptions-April-2024.zip"
dir <- file.path(system.file("extdata", package = "heRmes"), "icd10cm")
dest <- file.path(dir, "icd10cm-Codes-Descriptions-April-2024.zip")
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
download.file(url, dest)
code_file <- file.path(system.file("extdata", "icd10cm", package = "heRmes"),  "icd10cm-Codes-Descriptions-April-2024", "icd10cm-codes-April-2024.txt")
url <- "https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM/2024-Update/icd10cm-Codes-Descriptions-April-2024.zip"
dir <- file.path(system.file("extdata", package = "heRmes"), "icd10cm")
dest <- file.path(dir, "icd10cm-Codes-Descriptions-April-2024.zip")
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
download.file(url, dest)
unzip(dest)
dest
unzip(dest, exdir = "icd10cm-Codes-Descriptions-April-2024")
system.file("extdata", "icd10cm", package = "heRmes")
file.path(system.file("extdata", "icd10cm", package = "heRmes"), "icd10cm-Codes-Descriptions-April-2024")
unzip(dest, exdir = file.path(system.file("extdata", "icd10cm", package = "heRmes"), "icd10cm-Codes-Descriptions-April-2024"))
file.exists(code_file)
code_file
file.path(system.file("extdata", package = "heRmes"), "icd10cm", "icd10cm-Codes-Descriptions-April-2024", "icd10cm-codes-April-2024.txt")
code_file <- file.path(system.file("extdata", package = "heRmes"), "icd10cm", "icd10cm-Codes-Descriptions-April-2024", "icd10cm-codes-April-2024.txt")
file.exists(code_file)
codes <- data.table::fread(code_file)
codes <- data.table::fread(code_file, sep = " ")
codes <- data.table::fread(code_file, header = FALSE, col.names = c("Code", "Description"))
codes <- data.table::fread(code_file, header = FALSE, col.names = c("code", "description"), sep = "#####")
codes <- data.table::fread(code_file, header = FALSE, col.names = c("code", "description"), sep = "\n")
codes <- data.table::fread(code_file, header = FALSE, sep = "\n")
View(codes)
codes[, c("code", "description") := tstrsplit(V1, " ", fixed = TRUE, keep = 1L)]
codes[, c("code", "description") := data.table::tstrsplit(V1, " ", fixed = TRUE, keep = 1L)]
View(codes)
codes[, c("code", "description") := data.table::tstrsplit(V1, " ", fixed = TRUE, keep = 2L)]
View(codes)
?fread
codes <- data.table::fread(code_file, header = FALSE, sep = NULL)
View(codes)
codes[, V1 := sub("\\s+", ",")]
codes[, V1 := sub("\\s+", ",", V1)]
View(codes)
codes <- data.table::fread(code_file, header = FALSE, sep = NULL)
codes[, V1 := sub("\\s+", "#,#", V1)]
View(codes)
codes[, c("code", "description") := data.table::tstrsplit(V1, "#,#", fixed = TRUE)]
View(codes)
codes[, V1 := NULL]
View(codes)
install()
install()
heRmes::get_icd10cm()
install()
install()
install()
heRmes::get_icd10cm()
document(0)
document()
heRmes::get_icd10cm()
load_all()
heRmes::get_icd10cm()
heRmes::get_icd10cm()
codes = heRmes::get_icd10cm()
View(codes)
hf = codes[grepl("heart failure", description), ]
View(hf)
api_key <- "a1452beab2f941b0c32402fc82e4c6724694544d"  # Replace with your actual API key
item_number <- 279  # Example item number, change as necessary
# Create the request URL
url <- paste0("https://isd.digital.nhs.uk/trud/api/v1/keys/", api_key, "/items/", item_number, "/releases?latest")
# Make the HTTP GET request
response <- GET(url)
library(httr)
# Variables
api_key <- "a1452beab2f941b0c32402fc82e4c6724694544d"  # Replace with your actual API key
item_number <- 279  # Example item number, change as necessary
# Create the request URL
url <- paste0("https://isd.digital.nhs.uk/trud/api/v1/keys/", api_key, "/items/", item_number, "/releases?latest")
# Make the HTTP GET request
response <- GET(url)
# Check the status of the response
if (status_code(response) == 200) {
# Request was successful, parse JSON
releases_info <- content(response, "parsed")
print(releases_info)
} else {
# Handle possible errors
print(paste("Error with status code:", status_code(response)))
error_details <- content(response, "parsed")
print(error_details$message)
}
api_key <- "a1452beab2f941b0c32402fc82e4c6724694544d"  # Replace with your actual API key
item_number <- 19  # Example item number, change as necessary
# Create the request URL
url <- paste0("https://isd.digital.nhs.uk/trud/api/v1/keys/", api_key, "/items/", item_number, "/releases?latest")
# Make the HTTP GET request
response <- GET(url)
# Check the status of the response
if (status_code(response) == 200) {
# Request was successful, parse JSON
releases_info <- content(response, "parsed")
print(releases_info)
} else {
# Handle possible errors
print(paste("Error with status code:", status_code(response)))
error_details <- content(response, "parsed")
print(error_details$message)
}
install()
system.file("extdata", "icd10cm", "icd10cm_april_2024", "icd10cm-codes-April-2024.txt", package = "heRmes")
version = "uk"
install()
version <- match.arg(version, choices = c("uk", "int"))
code_file <- system.file("extdata", "snomed", paste0("sct2_description_", version, "_20240201.txt"), package = "heRmes")
paste0("sct2_description_", version, "_20240201.txt")
system.file("extdata", "snomed", paste0("sct2_description_", version, "_20240201.txt"), package = "heRmes")
system.file("extdata", "snomed", package = "heRmes")
paste0("sct2_description_", version, "_20240201.txt")
instal()
install()
load_all()
version <- match.arg(version, choices = c("uk", "int"))
code_file <- system.file("extdata", "snomed", paste0("sct2_description_", version, ".txt"), package = "heRmes")
codes <- data.table::fread(code_file)
View(codes)
View(codes)
version = "int"
version <- match.arg(version, choices = c("uk", "int"))
code_file <- system.file("extdata", "snomed", paste0("sct2_description_", version, ".txt"), package = "heRmes")
codes <- data.table::fread(code_file)
View(codes)
code_file <- system.file("extdata", "read_codes", "read_codes_v3_terms.txt", package = "heRmes")
install()
code_file <- system.file("extdata", "read_codes", "read_codes_v3_terms.txt", package = "heRmes")
codes <- data.table::fread(code_file, sep = "|")
codes <- codes[, list(code = V1, description = V3)]
code_file <- system.file("extdata", "read_codes", "read_codes_v3_terms.txt", package = "heRmes")
codes <- data.table::fread(code_file, sep = "|", quote="")
codes <- codes[, list(code = V1, description = V3)]
View(codes)
load_all()
sources <- match.arg(sources, choices = c("icd10cm", "snomed"), several.ok = TRUE)
terms = "heart\\s*failure|ventric[ulare]+\\s*dysfunction"
sources = c("icd10cm", "snomed")
sources <- match.arg(sources, choices = c("icd10cm", "snomed"), several.ok = TRUE)
codes <- list()
if ("icd10cm" %in% sources) codes <- c(codes, list(icd10cm = get_icd10cm()))
if ("snomed" %in% sources)  codes <- c(codes, list(snomed = get_snomed()))
codes <- data.table::rbindlist(codes, idcol = "source")
View(codes)
install()
load_all()
code_file <- system.file("extdata", "icd10", "icd10_ed4_20120401.txt", package = "heRmes")
codes <- data.table::fread(code_file, header = FALSE, skip = 1, sep = NULL)
View(codes)
codes <- data.table::fread(code_file, header = FALSE, skip = 1)
View(codes)
codes[, list(code = V1, description = V2)]
codes <- codes[, list(code = V1, description = V2)]
View(codes)
terms = "heart\\s*failure|ventric[ulare]+\\s*dysfunction"
sources = c("icd10cm", "icd10", "snomed")
sources <- match.arg(sources, choices = c("icd10cm", "icd10", "snomed"), several.ok = TRUE)
codes <- list()
if ("icd10cm" %in% sources) codes <- c(codes, list(icd10cm = get_icd10cm()))
if ("icd10" %in% sources)   codes <- c(codes, list(snomed = get_icd10()))
code_file <- system.file("extdata", "icd10", "icd10_ed4_20120401.txt", package = "heRmes")
codes <- data.table::fread(code_file, header = FALSE, skip = 1)
codes <- codes[, list(code = V1, description = V2)]
sources <- match.arg(sources, choices = c("icd10cm", "icd10", "snomed"), several.ok = TRUE)
codes <- list()
if ("icd10cm" %in% sources) codes <- c(codes, list(icd10cm = get_icd10cm()))
if ("icd10" %in% sources)   codes <- c(codes, list(snomed = get_icd10()))
load_all()
if ("icd10" %in% sources)   codes <- c(codes, list(snomed = get_icd10()))
if ("snomed" %in% sources)  codes <- c(codes, list(snomed = get_snomed()))
codes <- data.table::rbindlist(codes, idcol = "source")
sources <- match.arg(sources, choices = c("icd10cm", "icd10", "snomed"), several.ok = TRUE)
codes <- list()
if ("icd10cm" %in% sources) codes <- c(codes, list(icd10cm = get_icd10cm()))
if ("icd10" %in% sources)   codes <- c(codes, list(snomed = get_icd10()))
if ("snomed" %in% sources)  codes <- c(codes, list(snomed = get_snomed()))
codes <- data.table::rbindlist(codes, idcol = "source")
codes <- codes[grepl(terms, description) | grepl(terms, code), ]
View(codes)
code_file <- system.file("extdata", "icd10", "icd10_ed4_20120401.txt", package = "heRmes")
codes <- data.table::fread(code_file, header = FALSE, skip = 1)
codes <- codes[, list(code = V1, description = V2)]
View(codes)
sources <- match.arg(sources, choices = c("icd10cm", "icd10", "snomed"), several.ok = TRUE)
codes <- list()
if ("icd10cm" %in% sources) codes <- c(codes, list(icd10cm = get_icd10cm()))
if ("icd10" %in% sources)   codes <- c(codes, list(icd10 = get_icd10()))
if ("snomed" %in% sources)  codes <- c(codes, list(snomed = get_snomed()))
codes <- data.table::rbindlist(codes, idcol = "source")
codes <- codes[grepl(terms, description) | grepl(terms, code), ]
View(codes)
install()
load_all()
load_all()
load_all()
install()
install()
load_all()
n <- 10
ids <- paste0("ID_", c(1:5, 1:5))
codes <- sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE)
phenotype(ids, codes, "HF", "PH_HF_HERMES_3.0")
codes
use_vignette("phenotyping")
install()
document()
install()
load_all()
document()
load_all()
install()
install()
install()
library(heRmes)
set.seed(2020)
n   <- 10
dat <- data.frame(ids   = paste0("ID_", c(1:(n/2), 1:(n/2))),
codes = sample(c("I420", "foo", "bar", "baz"), n, replace = TRUE))
ids = dat$ids
codes=dat$codes
name="HF"
include = "PH_HF_HERMES_3.0"
exclude = "PH_congHD_HERMES_3.0"
stopifnot("ids and codes should be the same length" = length(ids)==length(codes))
# create the data.table
dat <- data.table::data.table(id = ids, code = codes)
include_codes <- lapply(include, function(x) get_codes(x)) |> data.table::rbindlist()
# get the exclusion codes
if (!is.null(exclude)) {
exclude_codes <- lapply(exclude, function(x) get_codes(x)) |> data.table::rbindlist()
} else {
exclude_codes <- get_codes(include)[rep(FALSE, nrow(pheno_codes)), ]
}
dat[include_codes, include := TRUE, on = "code"]
View(dat)
dat[is.na(include), include := FALSE]
View(dat)
dat[exclude_codes, exclude := TRUE, on = "code"]
View(dat)
dat[is.na(exclude), exclude := FALSE]
res <- dat[, list(include = any(include), exclude = any(exclude)), by = "id"]
res[, (name) := include & !exclude]
View(res)
install()
install()
install()
install()
load_all()
load_all()
install()
use_readme_rmd()
